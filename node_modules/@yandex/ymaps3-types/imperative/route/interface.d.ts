import type { GenericFeature, LineStringGeometry, LngLat, LngLatBounds } from "../../common/types";
export interface RawStep {
    length: number;
    duration: number;
    mode: string;
    polyline: {
        points: LngLat[];
    };
}
export interface RawLeg {
    status: string;
    steps: RawStep[];
}
export interface RawRoute {
    traffic: string;
    route: {
        legs: RawLeg[];
        flags?: {
            hasTolls?: boolean;
            hasNonTransactionalTolls?: boolean;
        };
    };
}
export interface RouteFeature extends GenericFeature<LngLat> {
    geometry: LineStringGeometry;
    properties: {
        bounds?: LngLatBounds;
        flags?: {
            hasTolls?: boolean;
            hasNonTransactionalTolls?: boolean;
        };
    };
}
export interface BaseRouteResponse {
    /** Return requested route as {@link RouteFeature RouteFeature}. */
    toRoute(): RouteFeature;
}
export interface RouteOptions {
    /** Route points represented by {@link LngLat LngLat} coordinates. */
    points: LngLat[];
    /** Route type. Only 'driving' type is available at this moment. */
    type: 'driving';
    /** If specified, bounding box of the route will be returned in properties. Default is `false`. */
    bounds?: boolean;
    /** Avoid roads with tolls. Default is `false`. */
    avoidTolls?: boolean;
}
