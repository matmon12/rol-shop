import type { LineStringGeometry, Margin, MultiLineStringGeometry, MultiPolygonGeometry, PointGeometry, PolygonGeometry } from "../../common/types";
export interface DraggableProps<Callback> {
    /** Feature can be draggable */
    draggable?: boolean;
    /** Will map center follows marker on drag if marker near the edge of the map */
    mapFollowsOnDrag?: boolean | {
        activeZoneMargin?: Margin;
    };
    /** Fires on drag start */
    onDragStart?: Callback;
    /**
         * Maybe a function which will be called when the user drags and drops the element to a new position in the map.
         * The arguments to the function will be with new coordinates.
         * A component using with component should immediately store the new coordinates into its state and then pass
         * the new coordinates as the marker's props.
         * */
    onDragEnd?: Callback;
    /** Fires on drag move */
    onDragMove?: Callback;
    /** Will block maps events on marker */
    blockEvents?: boolean;
    /** Will block maps behaviors on marker */
    blockBehaviors?: boolean;
}
export interface FeatureClickEvents {
    /** Double click handler */
    onDoubleClick?: (event: MouseEvent) => void;
    /** Click handler */
    onClick?: (event: MouseEvent) => void;
    /** Fast click handler */
    onFastClick?: (event: MouseEvent) => void;
}
export type Geometry = PolygonGeometry | MultiPolygonGeometry | LineStringGeometry | MultiLineStringGeometry | PointGeometry;
export type YMapFeatureEventHandler = (coordinates: Geometry['coordinates']) => void | false;
