interface Ymaps3Error extends Error {
    additionalInfo?: Additional;
    logged?: boolean;
}
type Additional = Record<string, unknown>;
interface LogErrorOptions {
    message?: string;
    service?: string;
    source?: string;
    sourceMethod?: string;
    type?: string;
    block?: string;
    method?: string;
    page?: string;
    additional?: Additional;
    level?: 'info' | 'debug' | 'warn' | 'error' | 'critical' | 'trace';
}
interface LogErrorInitSettings {
    project?: string;
    unhandledRejection?: boolean;
    uncaughtException?: boolean;
}
type ErrorLoggerInitFunction = (settings: LogErrorInitSettings) => ErrorLoggerFunction;
type ErrorLoggerFunction = (options: LogErrorOptions, error?: Ymaps3Error) => void;
export type Ymaps3ReactError = Omit<Ymaps3Error, 'logged'>;
export { ErrorLoggerInitFunction };
export declare function errorLoggerFactory(initLogger: ErrorLoggerInitFunction): void;
export declare function logError(error: Ymaps3ReactError, options?: Record<string, unknown>): void;
export declare function throwError(error: Ymaps3ReactError): never;
