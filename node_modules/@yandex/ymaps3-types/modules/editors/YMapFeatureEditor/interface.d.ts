import type { LngLat, DrawingStyle, GenericLineStringGeometry, GenericPolygonGeometry } from "../../../common/types";
import type { YMapEntity } from "../../../imperative";
export type Geometry = GenericPolygonGeometry<LngLat> | GenericLineStringGeometry<LngLat>;
export interface DraggingPoint {
    point: LngLat;
    index: number;
}
export interface PreviewPoint {
    point: LngLat;
    segmentIndex: number;
}
export type YMapFeatureEditorProps = {
    isActive?: boolean;
    points: LngLat[];
    geometry: Geometry;
    featureStyle?: DrawingStyle;
    renderPoint?: (index: number) => HTMLElement | YMapEntity<unknown>;
    previewPointElement?: false | HTMLElement | YMapEntity<unknown>;
    onLayerClick?: (coordinates: LngLat, index: number) => void;
    onPointClick?: (index: number) => void;
    onPointDblClick?: (index: number) => void;
    onPointDrag?: (coordinates: LngLat, index: number) => void;
    onPreviewPointClick?: (coordinates: LngLat, index: number) => void;
    onPreviewPointDragStart?: (coordinates: LngLat, index: number) => void;
    onPreviewPointDrag?: (coordinates: LngLat, index: number) => void;
    onDrag?: (newGeometry: Geometry) => void;
    prefix?: string;
    zIndex?: number;
    /** z index of marker point/preview point, defaults to {@link DEFAULT_Z_INDEX} */
    pointZIndex?: number;
    previewPointZIndex?: number;
};
