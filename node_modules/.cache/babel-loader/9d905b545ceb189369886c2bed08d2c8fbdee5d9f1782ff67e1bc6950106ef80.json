{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, inject } from \"vue\";\nimport axios from \"axios\";\nimport { useStore, mapState, mapMutations } from \"vuex\";\nimport { ElNotification } from \"element-plus\";\nexport default {\n  data() {\n    return {\n      loading: false,\n      paths: [{\n        name: \"Профиль\",\n        path: \"/rol-shop/profile\"\n      }, {\n        name: \"Адрес доставки\",\n        path: \"/rol-shop/profile/address\"\n      }, {\n        name: \"Добавление адреса доставки\",\n        path: \"/rol-shop/map\"\n      }],\n      result: [],\n      rules: {\n        address: [{\n          required: true,\n          message: \"Нужно заполнить!\",\n          trigger: \"blur\"\n        }, {\n          min: 5,\n          message: \"Слишком короткий!\",\n          trigger: \"blur\"\n        }, {\n          validator: this.checkGeo,\n          trigger: \"submit\"\n        }, {\n          validator: this.checkSelect,\n          trigger: \"submit\"\n        }]\n      }\n    };\n  },\n  methods: {\n    ...mapMutations({\n      setPaths: \"crumbs/setPaths\"\n    }),\n    async fetchAddressSelect(value, cb) {\n      try {\n        this.checkFromSelect = false;\n        if (value) {\n          const {\n            data\n          } = await axios.get(`https://suggest-maps.yandex.ru/v1/suggest?apikey=00748542-2e0b-439d-864b-98b4baac2c5f&text=${value}&bbox=${this.area}&lang=ru_RU&strict_bounds=1&print_address=1`);\n          this.result = data.results.map(item => ({\n            address: item.address.formatted_address,\n            house: item.address.component.find(pl => pl.kind == \"HOUSE\") ? item.address.component.find(pl => pl.kind == \"HOUSE\").name : \"\",\n            city: item.address.component.find(pl => pl.kind == \"LOCALITY\") ? item.address.component.find(pl => pl.kind == \"LOCALITY\").name : \"\",\n            miniAddress: item.address.component.filter(item => [\"HOUSE\", \"STREET\", \"VEGETATION\", \"DISTRICT\", \"METRO\"].includes(item.kind[0]))\n          }));\n          // возвращение данных\n          cb(this.result);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    async fetchAddress() {\n      let apiRes = null;\n      try {\n        const {\n          data\n        } = await axios.get(`https://c2ff7a8de0a119c8.mokky.dev/address`);\n        this.address = data;\n      } catch (err) {\n        apiRes = err.response.status;\n      } finally {\n        if (apiRes == 404) {\n          this.$router.push(\"/rol-shop/404\");\n        }\n      }\n    },\n    async postAddress() {\n      let apiRes = null;\n      try {\n        this.loading = true;\n        let joinAddress = this.miniAddress.map(item => item.name).join(\", \");\n        if (!this.repeatAddress(joinAddress, this.form.house, this.form.input, this.form.floor, this.form.apartment, this.city)) {\n          const {\n            data\n          } = await axios.post(`https://c2ff7a8de0a119c8.mokky.dev/address`, {\n            address: joinAddress,\n            house: this.form.house,\n            input: this.form.input,\n            floor: this.form.floor,\n            apartment: this.form.apartment,\n            city: this.city\n          });\n        } else {\n          // notif\n          this.openNotif();\n        }\n        this.form.address = \"\";\n        this.form.house = \"\";\n        this.form.input = \"\";\n        this.form.floor = \"\";\n        this.form.apartment = \"\";\n      } catch (err) {\n        apiRes = err.response.status;\n      } finally {\n        this.loading = false;\n        this.fetchAddress();\n        if (apiRes == 404) {\n          this.$router.push(\"/rol-shop/404\");\n        }\n        // notif\n        this.openNotif(\"Ошибка\", \"Ваш адрес успешно сохранен!\");\n      }\n    },\n    handleSelect(item) {\n      // заполнение полей\n      this.form.address = item.address;\n      this.form.house = item.house;\n\n      // сохранение города\n      this.city = item.city;\n\n      // сохранение адреса без города\n      this.miniAddress = item.miniAddress;\n\n      // перемещение по карте\n      this.$refs.Map.moveMap(item.address);\n\n      // проверка что адрес был выбран из списка или карты\n      this.checkFromSelect = true;\n    },\n    sumbitForm(forName) {\n      forName.validate(valid => {\n        if (valid) {\n          this.postAddress();\n        } else {\n          return false;\n        }\n      });\n    },\n    repeatAddress(address, house, input, floor, apartment, city) {\n      for (let item of this.address) {\n        if (item.address === address && item.house === house && item.input === input && item.floor === floor && item.apartment === apartment && item.city === city) {\n          return true;\n        }\n      }\n      return false;\n    },\n    openNotif(title, message) {\n      ElNotification.success({\n        title: title,\n        message: message,\n        showClose: false\n      });\n    }\n  },\n  beforeRouteEnter(to, from, next) {\n    next(vm => {\n      vm.setPaths(vm.paths);\n    });\n  },\n  computed: {\n    ...mapState({\n      loadingDeliveryCheck: state => state.map.loading,\n      loadingAddress: state => state.map.loadingAddress\n    })\n  },\n  mounted() {\n    this.fetchAddress();\n  },\n  setup() {\n    const store = useStore();\n    var arrayCoord = computed(() => store.state.map.arrayCoord);\n    var deliveryPossible = computed(() => store.state.map.deliveryPossible);\n    const {\n      area,\n      address\n    } = inject(\"address\");\n    const form = ref({\n      address: \"\",\n      house: \"\",\n      input: \"\",\n      floor: \"\",\n      apartment: \"\"\n    });\n    const ruleFormRef = ref();\n    const loadingGeocoder = ref(false);\n    var checkFromSelect = ref(false);\n    const city = ref();\n    const miniAddress = ref();\n    const geocoderCoord = async (lat, long) => {\n      try {\n        loadingGeocoder.value = true;\n        form.value.address = \"\";\n        form.value.house = \"\";\n        const {\n          data\n        } = await axios.get(`https://geocode-maps.yandex.ru/1.x/?apikey=37720b8b-dc03-4346-b6a4-3ae3458e9af6&geocode=${lat},${long}&format=json&lang=ru_RU`);\n        const path = data.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData;\n\n        // заполнение полей адреса и дом\n        if (path.kind == \"house\") {\n          form.value.house = path.Address.Components.find(item => item.kind == \"house\").name;\n        }\n        const filteredArray = path.Address.Components.filter(item => [\"street\", \"metro\", \"district\", \"area\", \"province\", \"railway_station\", \"station\", \"vegetation\", \"other\", \"house\"].includes(item.kind));\n        const names = filteredArray.map(item => item.name).join(\", \");\n        // адрес с карты в инпут\n        form.value.address = names;\n\n        // город\n        let isCity = path.Address.Components.filter(item => item.kind === \"locality\");\n        if (isCity.length > 0) {\n          city.value = isCity[0].name;\n        }\n\n        // адрес без города\n        let isAddress = path.Address.Components.filter(item => [\"street\", \"metro\", \"district\", \"railway_station\", \"station\", \"vegetation\", \"house\"].includes(item.kind));\n        if (isAddress.length > 0) {\n          miniAddress.value = isAddress;\n        }\n\n        // проверка что адрес был выбран из списка или карты\n        checkFromSelect.value = true;\n      } catch (err) {\n        console.log(err);\n      } finally {\n        loadingGeocoder.value = false;\n      }\n    };\n\n    // проверка адреса на доступность для доставки\n    const checkGeo = (rule, value, callback) => {\n      let possible = false;\n      store.dispatch(\"map/geocoderAddress\", value).then(() => {\n        store.dispatch(\"map/checkAddress\", {\n          lat: arrayCoord.value[0],\n          long: arrayCoord.value[1]\n        }).then(() => {\n          possible = deliveryPossible.value;\n          if (value && !possible) {\n            callback(new Error(\"Доставка по этому адресу не осуществляется!\"));\n          } else {\n            callback();\n          }\n        });\n      });\n    };\n\n    // проверка что адрес был выбран из списка или карты\n    const checkSelect = (rule, value, callback) => {\n      if (!checkFromSelect.value) {\n        callback(new Error(\"Адрес не выбран!\"));\n      } else {\n        callback();\n      }\n    };\n    return {\n      geocoderCoord,\n      form,\n      ruleFormRef,\n      checkGeo,\n      checkSelect,\n      loadingGeocoder,\n      checkFromSelect,\n      city,\n      miniAddress,\n      area,\n      address\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","inject","axios","useStore","mapState","mapMutations","ElNotification","data","loading","paths","name","path","result","rules","address","required","message","trigger","min","validator","checkGeo","checkSelect","methods","setPaths","fetchAddressSelect","value","cb","checkFromSelect","get","area","results","map","item","formatted_address","house","component","find","pl","kind","city","miniAddress","filter","includes","err","console","log","fetchAddress","apiRes","response","status","$router","push","postAddress","joinAddress","join","repeatAddress","form","input","floor","apartment","post","openNotif","handleSelect","$refs","Map","moveMap","sumbitForm","forName","validate","valid","title","success","showClose","beforeRouteEnter","to","from","next","vm","loadingDeliveryCheck","state","loadingAddress","mounted","setup","store","arrayCoord","deliveryPossible","ruleFormRef","loadingGeocoder","geocoderCoord","lat","long","GeoObjectCollection","featureMember","GeoObject","metaDataProperty","GeocoderMetaData","Address","Components","filteredArray","names","isCity","length","isAddress","rule","callback","possible","dispatch","then","Error"],"sources":["C:\\gitPages\\rol-shop\\src\\pages\\AddressMap.vue"],"sourcesContent":["<template>\r\n  <div class=\"destination\">\r\n    <div class=\"container\">\r\n      <Crumbs :paths=\"paths\" class=\"crumbs\" />\r\n\r\n      <h1 class=\"destination-title\">Добавление адреса доставки</h1>\r\n      <div class=\"destination__inner\">\r\n        <div class=\"destination__form\">\r\n          <h6 class=\"destination__form-title\">\r\n            Введите адрес <br />или выберите на карте\r\n          </h6>\r\n          <el-form ref=\"ruleFormRef\" :model=\"form\">\r\n            <el-form-item prop=\"address\" :rules=\"rules.address\">\r\n              <el-autocomplete\r\n                v-model=\"form.address\"\r\n                :fetch-suggestions=\"fetchAddressSelect\"\r\n                :trigger-on-focus=\"false\"\r\n                placeholder=\"Введите адрес\"\r\n                @select=\"handleSelect\"\r\n                :debounce=\"1000\"\r\n                clearable\r\n                fit-input-width\r\n                popper-class=\"my-autocomplete\"\r\n                class=\"destination__form-search\"\r\n              >\r\n                <template #prefix>\r\n                  <img src=\"@/img/icon/search.svg\" alt=\"\" />\r\n                </template>\r\n                <template #default=\"{ item }\">\r\n                  <div class=\"address\">{{ item.address }}</div>\r\n                </template>\r\n              </el-autocomplete>\r\n            </el-form-item>\r\n            <div class=\"destination__list\">\r\n              <el-form-item prop=\"house\">\r\n                <p class=\"destination__list-title\">Номер дома</p>\r\n                <el-input\r\n                  class=\"destination__list-input\"\r\n                  placeholder=\"Номер\"\r\n                  v-model=\"form.house\"\r\n                />\r\n              </el-form-item>\r\n              <el-form-item prop=\"input\">\r\n                <p class=\"destination__list-title\">Подъезд</p>\r\n                <el-input\r\n                  class=\"destination__list-input\"\r\n                  placeholder=\"Номер\"\r\n                  v-model=\"form.input\"\r\n                />\r\n              </el-form-item>\r\n              <el-form-item prop=\"floor\">\r\n                <p class=\"destination__list-title\">Этаж</p>\r\n                <el-input\r\n                  class=\"destination__list-input\"\r\n                  placeholder=\"Номер\"\r\n                  v-model=\"form.floor\"\r\n                />\r\n              </el-form-item>\r\n              <el-form-item prop=\"apartment\">\r\n                <p class=\"destination__list-title\">Квартира</p>\r\n                <el-input\r\n                  class=\"destination__list-input\"\r\n                  placeholder=\"Номер\"\r\n                  v-model=\"form.apartment\"\r\n                />\r\n              </el-form-item>\r\n            </div>\r\n            <el-form-item>\r\n              <el-button\r\n                class=\"destination__btn\"\r\n                color=\"#00cc2d\"\r\n                @click=\"sumbitForm(ruleFormRef)\"\r\n                :loading=\"\r\n                  loading || loadingDeliveryCheck || loadingAddress || loadingGeocoder\r\n                \"\r\n                :disabled=\"\r\n                  loading || loadingDeliveryCheck || loadingAddress || loadingGeocoder\r\n                \"\r\n              >\r\n                <template #loading>\r\n                  <div class=\"custom-loading\">\r\n                    <svg class=\"circular\" viewBox=\"-10, -10, 50, 50\">\r\n                      <path\r\n                        class=\"path\"\r\n                        d=\"\r\n                          M 30 15\r\n                          L 28 17\r\n                          M 25.61 25.61\r\n                          A 15 15, 0, 0, 1, 15 30\r\n                          A 15 15, 0, 1, 1, 27.99 7.5\r\n                          L 15 15\r\n                        \"\r\n                        style=\"stroke-width: 4px; fill: rgba(0, 0, 0, 0)\"\r\n                      />\r\n                    </svg>\r\n                  </div>\r\n                </template>\r\n                {{\r\n                  loadingDeliveryCheck || loadingAddress\r\n                    ? \"Проверка адреса\"\r\n                    : loading\r\n                    ? \"Идет отправка\"\r\n                    : \"Сохранить адрес\"\r\n                }}\r\n              </el-button>\r\n            </el-form-item>\r\n          </el-form>\r\n        </div>\r\n\r\n        <div class=\"destination__map\">\r\n          <Map :geocoderCoord=\"geocoderCoord\" ref=\"Map\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, inject } from \"vue\";\r\nimport axios from \"axios\";\r\nimport { useStore, mapState, mapMutations } from \"vuex\";\r\nimport { ElNotification } from \"element-plus\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      paths: [\r\n        { name: \"Профиль\", path: \"/rol-shop/profile\" },\r\n        { name: \"Адрес доставки\", path: \"/rol-shop/profile/address\" },\r\n        { name: \"Добавление адреса доставки\", path: \"/rol-shop/map\" },\r\n      ],\r\n      result: [],\r\n      rules: {\r\n        address: [\r\n          { required: true, message: \"Нужно заполнить!\", trigger: \"blur\" },\r\n          { min: 5, message: \"Слишком короткий!\", trigger: \"blur\" },\r\n          { validator: this.checkGeo, trigger: \"submit\" },\r\n          { validator: this.checkSelect, trigger: \"submit\" },\r\n        ],\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    ...mapMutations({\r\n      setPaths: \"crumbs/setPaths\",\r\n    }),\r\n    async fetchAddressSelect(value, cb) {\r\n      try {\r\n        this.checkFromSelect = false;\r\n        if (value) {\r\n          const { data } = await axios.get(\r\n            `https://suggest-maps.yandex.ru/v1/suggest?apikey=00748542-2e0b-439d-864b-98b4baac2c5f&text=${value}&bbox=${this.area}&lang=ru_RU&strict_bounds=1&print_address=1`\r\n          );\r\n          this.result = data.results.map((item) => ({\r\n            address: item.address.formatted_address,\r\n            house: item.address.component.find((pl) => pl.kind == \"HOUSE\")\r\n              ? item.address.component.find((pl) => pl.kind == \"HOUSE\").name\r\n              : \"\",\r\n            city: item.address.component.find((pl) => pl.kind == \"LOCALITY\")\r\n              ? item.address.component.find((pl) => pl.kind == \"LOCALITY\").name\r\n              : \"\",\r\n            miniAddress: item.address.component.filter((item) =>\r\n              [\"HOUSE\", \"STREET\", \"VEGETATION\", \"DISTRICT\", \"METRO\"].includes(\r\n                item.kind[0]\r\n              )\r\n            ),\r\n          }));\r\n          // возвращение данных\r\n          cb(this.result);\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    },\r\n    async fetchAddress() {\r\n      let apiRes = null;\r\n      try {\r\n        const { data } = await axios.get(`https://c2ff7a8de0a119c8.mokky.dev/address`);\r\n\r\n        this.address = data;\r\n      } catch (err) {\r\n        apiRes = err.response.status;\r\n      } finally {\r\n        if (apiRes == 404) {\r\n          this.$router.push(\"/rol-shop/404\");\r\n        }\r\n      }\r\n    },\r\n    async postAddress() {\r\n      let apiRes = null;\r\n      try {\r\n        this.loading = true;\r\n        let joinAddress = this.miniAddress.map((item) => item.name).join(\", \");\r\n\r\n        if (\r\n          !this.repeatAddress(\r\n            joinAddress,\r\n            this.form.house,\r\n            this.form.input,\r\n            this.form.floor,\r\n            this.form.apartment,\r\n            this.city\r\n          )\r\n        ) {\r\n          const { data } = await axios.post(\r\n            `https://c2ff7a8de0a119c8.mokky.dev/address`,\r\n            {\r\n              address: joinAddress,\r\n              house: this.form.house,\r\n              input: this.form.input,\r\n              floor: this.form.floor,\r\n              apartment: this.form.apartment,\r\n              city: this.city,\r\n            }\r\n          );\r\n        } else {\r\n          // notif\r\n          this.openNotif();\r\n        }\r\n\r\n        this.form.address = \"\";\r\n        this.form.house = \"\";\r\n        this.form.input = \"\";\r\n        this.form.floor = \"\";\r\n        this.form.apartment = \"\";\r\n      } catch (err) {\r\n        apiRes = err.response.status;\r\n      } finally {\r\n        this.loading = false;\r\n        this.fetchAddress();\r\n        if (apiRes == 404) {\r\n          this.$router.push(\"/rol-shop/404\");\r\n        }\r\n        // notif\r\n        this.openNotif(\"Ошибка\", \"Ваш адрес успешно сохранен!\");\r\n      }\r\n    },\r\n    handleSelect(item) {\r\n      // заполнение полей\r\n      this.form.address = item.address;\r\n      this.form.house = item.house;\r\n\r\n      // сохранение города\r\n      this.city = item.city;\r\n\r\n      // сохранение адреса без города\r\n      this.miniAddress = item.miniAddress;\r\n\r\n      // перемещение по карте\r\n      this.$refs.Map.moveMap(item.address);\r\n\r\n      // проверка что адрес был выбран из списка или карты\r\n      this.checkFromSelect = true;\r\n    },\r\n    sumbitForm(forName) {\r\n      forName.validate((valid) => {\r\n        if (valid) {\r\n          this.postAddress();\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    repeatAddress(address, house, input, floor, apartment, city) {\r\n      for (let item of this.address) {\r\n        if (\r\n          item.address === address &&\r\n          item.house === house &&\r\n          item.input === input &&\r\n          item.floor === floor &&\r\n          item.apartment === apartment &&\r\n          item.city === city\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n    openNotif(title, message) {\r\n      ElNotification.success({\r\n        title: title,\r\n        message: message,\r\n        showClose: false,\r\n      });\r\n    },\r\n  },\r\n  beforeRouteEnter(to, from, next) {\r\n    next((vm) => {\r\n      vm.setPaths(vm.paths);\r\n    });\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      loadingDeliveryCheck: (state) => state.map.loading,\r\n      loadingAddress: (state) => state.map.loadingAddress,\r\n    }),\r\n  },\r\n  mounted() {\r\n    this.fetchAddress();\r\n  },\r\n  setup() {\r\n    const store = useStore();\r\n    var arrayCoord = computed(() => store.state.map.arrayCoord);\r\n    var deliveryPossible = computed(() => store.state.map.deliveryPossible);\r\n    const { area, address } = inject(\"address\");\r\n    const form = ref({\r\n      address: \"\",\r\n      house: \"\",\r\n      input: \"\",\r\n      floor: \"\",\r\n      apartment: \"\",\r\n    });\r\n    const ruleFormRef = ref();\r\n    const loadingGeocoder = ref(false);\r\n    var checkFromSelect = ref(false);\r\n    const city = ref();\r\n    const miniAddress = ref();\r\n\r\n    const geocoderCoord = async (lat, long) => {\r\n      try {\r\n        loadingGeocoder.value = true;\r\n\r\n        form.value.address = \"\";\r\n        form.value.house = \"\";\r\n\r\n        const { data } = await axios.get(\r\n          `https://geocode-maps.yandex.ru/1.x/?apikey=37720b8b-dc03-4346-b6a4-3ae3458e9af6&geocode=${lat},${long}&format=json&lang=ru_RU`\r\n        );\r\n\r\n        const path =\r\n          data.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty\r\n            .GeocoderMetaData;\r\n\r\n        // заполнение полей адреса и дом\r\n        if (path.kind == \"house\") {\r\n          form.value.house = path.Address.Components.find(\r\n            (item) => item.kind == \"house\"\r\n          ).name;\r\n        }\r\n        const filteredArray = path.Address.Components.filter((item) =>\r\n          [\r\n            \"street\",\r\n            \"metro\",\r\n            \"district\",\r\n            \"area\",\r\n            \"province\",\r\n            \"railway_station\",\r\n            \"station\",\r\n            \"vegetation\",\r\n            \"other\",\r\n            \"house\",\r\n          ].includes(item.kind)\r\n        );\r\n        const names = filteredArray.map((item) => item.name).join(\", \");\r\n        // адрес с карты в инпут\r\n        form.value.address = names;\r\n\r\n        // город\r\n        let isCity = path.Address.Components.filter((item) => item.kind === \"locality\");\r\n        if (isCity.length > 0) {\r\n          city.value = isCity[0].name;\r\n        }\r\n\r\n        // адрес без города\r\n        let isAddress = path.Address.Components.filter((item) =>\r\n          [\r\n            \"street\",\r\n            \"metro\",\r\n            \"district\",\r\n            \"railway_station\",\r\n            \"station\",\r\n            \"vegetation\",\r\n            \"house\",\r\n          ].includes(item.kind)\r\n        );\r\n        if (isAddress.length > 0) {\r\n          miniAddress.value = isAddress;\r\n        }\r\n\r\n        // проверка что адрес был выбран из списка или карты\r\n        checkFromSelect.value = true;\r\n      } catch (err) {\r\n        console.log(err);\r\n      } finally {\r\n        loadingGeocoder.value = false;\r\n      }\r\n    };\r\n\r\n    // проверка адреса на доступность для доставки\r\n    const checkGeo = (rule, value, callback) => {\r\n      let possible = false;\r\n      store.dispatch(\"map/geocoderAddress\", value).then(() => {\r\n        store\r\n          .dispatch(\"map/checkAddress\", {\r\n            lat: arrayCoord.value[0],\r\n            long: arrayCoord.value[1],\r\n          })\r\n          .then(() => {\r\n            possible = deliveryPossible.value;\r\n            if (value && !possible) {\r\n              callback(new Error(\"Доставка по этому адресу не осуществляется!\"));\r\n            } else {\r\n              callback();\r\n            }\r\n          });\r\n      });\r\n    };\r\n\r\n    // проверка что адрес был выбран из списка или карты\r\n    const checkSelect = (rule, value, callback) => {\r\n      if (!checkFromSelect.value) {\r\n        callback(new Error(\"Адрес не выбран!\"));\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n\r\n    return {\r\n      geocoderCoord,\r\n      form,\r\n      ruleFormRef,\r\n      checkGeo,\r\n      checkSelect,\r\n      loadingGeocoder,\r\n      checkFromSelect,\r\n      city,\r\n      miniAddress,\r\n      area,\r\n      address,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.crumbs {\r\n  margin-bottom: 32px;\r\n}\r\n.destination-title {\r\n  color: var(--grey-dark);\r\n  font-size: 48px;\r\n  font-weight: 700;\r\n  line-height: 133%;\r\n  margin-bottom: 24px;\r\n}\r\n.destination {\r\n  margin-bottom: 64px;\r\n  &__inner {\r\n    display: flex;\r\n    gap: 24px;\r\n  }\r\n\r\n  &__form {\r\n    height: fit-content;\r\n    min-width: 379px;\r\n    max-width: 379px;\r\n    border-radius: $border;\r\n    background-color: var(--white);\r\n    padding: 16px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 24px;\r\n  }\r\n\r\n  &__form-title {\r\n    color: var(--grey-dark);\r\n    text-align: center;\r\n    font-weight: 500;\r\n  }\r\n\r\n  &__list {\r\n    display: grid;\r\n    grid-template-columns: repeat(2, 1fr);\r\n    row-gap: 24px;\r\n    column-gap: 12px;\r\n    margin-top: 24px;\r\n  }\r\n\r\n  &__list-item {\r\n  }\r\n\r\n  &__list-title {\r\n    color: #9e9e9e;\r\n    font-size: 14px;\r\n    line-height: 142%;\r\n    margin-bottom: 4px;\r\n  }\r\n\r\n  &__map {\r\n    // flex-grow: 1;\r\n    width: 100%;\r\n    height: 540px;\r\n    border-radius: $border;\r\n    overflow: hidden;\r\n  }\r\n}\r\n</style>\r\n<style lang=\"scss\">\r\n.ymaps-2-1-79-map-copyrights-promo {\r\n  display: none;\r\n}\r\n.icon-marker {\r\n  cursor: pointer;\r\n\r\n  width: 57px;\r\n  height: 57px;\r\n  border-radius: 50%;\r\n\r\n  position: relative;\r\n  transform: translate(-50%, -90%);\r\n  &::after {\r\n    content: url(\"@/img/icon/location.svg\");\r\n  }\r\n}\r\n// inputs\r\n.destination__list-input {\r\n  height: 48px;\r\n  width: 100%;\r\n  background: var(--grey-light);\r\n  border-radius: $border;\r\n  color: var(--grey-dark);\r\n  font-weight: 400;\r\n  &::placeholder {\r\n    color: #8f8f8f;\r\n  }\r\n}\r\n// btn\r\n.destination__btn {\r\n  height: 56px;\r\n  padding: 16px 24px;\r\n  color: var(--white);\r\n  font-weight: 500;\r\n  text-align: center;\r\n  border-radius: $border;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  margin-top: 16px;\r\n  transition: $transition;\r\n}\r\n\r\n.el-button {\r\n  --el-button-disabled-bg-color: rgb(185, 185, 185);\r\n}\r\n.el-button.is-disabled,\r\n.el-button.is-disabled:focus,\r\n.el-button.is-disabled:hover {\r\n  background-color: rgb(185, 185, 185);\r\n  border-color: rgb(185, 185, 185);\r\n}\r\n\r\n.destination {\r\n  .el-form-item__content {\r\n    line-height: inherit;\r\n    position: relative;\r\n    font-size: inherit;\r\n  }\r\n\r\n  // autocomplete\r\n  .el-autocomplete {\r\n    width: 100%;\r\n  }\r\n  .el-input {\r\n    height: 48px;\r\n    width: 100%;\r\n    background: var(--grey-light);\r\n    border-radius: $border;\r\n    color: var(--grey-dark);\r\n    font-weight: 400;\r\n  }\r\n  .el-input__wrapper {\r\n    flex-grow: 1;\r\n    padding: 1px 18px;\r\n    background-color: transparent;\r\n    border-radius: $border;\r\n    cursor: text;\r\n    transition: none;\r\n    transform: none;\r\n    box-shadow: none;\r\n    &:hover,\r\n    &.is-focus {\r\n      box-shadow: none;\r\n    }\r\n  }\r\n  .el-input__prefix-inner > :last-child {\r\n    margin-right: 16px;\r\n  }\r\n  .el-input__inner {\r\n    --el-input-inner-height: 100%;\r\n    width: 100%;\r\n    color: var(--grey-dark);\r\n    font-size: 16px;\r\n    height: 100%;\r\n    line-height: 1.5;\r\n  }\r\n  .el-input {\r\n    --el-input-placeholder-color: #8f8f8f;\r\n  }\r\n\r\n  // form\r\n  .el-form-item {\r\n    display: flex;\r\n    --font-size: 14px;\r\n    margin-bottom: 0px;\r\n  }\r\n\r\n  // loading\r\n  .el-button .custom-loading .circular {\r\n    margin-right: 6px;\r\n    width: 25px;\r\n    height: 25px;\r\n    animation: loading-rotate 2s linear infinite;\r\n  }\r\n  .el-button .custom-loading .circular .path {\r\n    animation: loading-dash 1.5s ease-in-out infinite;\r\n    stroke-dasharray: 90, 150;\r\n    stroke-dashoffset: 0;\r\n    stroke-width: 2;\r\n    stroke: var(--el-button-text-color);\r\n    stroke-linecap: round;\r\n  }\r\n}\r\n\r\n// dropdown\r\n.el-popper.is-light {\r\n  background: var(--grey-light);\r\n  border: 1px solid #bdbdbd;\r\n}\r\n.el-autocomplete__popper.el-popper {\r\n  box-shadow: none;\r\n}\r\n.el-popper {\r\n  border-radius: $border;\r\n  padding: 0px;\r\n  font-size: 16px;\r\n  line-height: 1.5;\r\n  overflow-wrap: normal;\r\n}\r\n.el-autocomplete-suggestion {\r\n  border-radius: $border;\r\n}\r\n// dropdown контейнер\r\n.el-autocomplete-suggestion__wrap {\r\n  max-height: 280px;\r\n  padding: 0;\r\n  border-radius: $border;\r\n}\r\n.el-autocomplete-suggestion li {\r\n  padding: 10px 20px;\r\n  line-height: 1.5;\r\n  cursor: pointer;\r\n  color: var(--grey-dark);\r\n  font-size: 16px;\r\n  transition: $transition;\r\n  white-space: break-spaces;\r\n  &:not(:last-child) {\r\n    border-bottom: 1px solid #bdbdbd;\r\n  }\r\n  &:hover {\r\n    background-color: #e6e4e4;\r\n  }\r\n}\r\n// очистка поля\r\n.el-input .el-input__clear,\r\n.el-input .el-input__password {\r\n  color: var(--el-input-icon-color);\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n}\r\n// стрелка\r\n.el-popper__arrow::before {\r\n  width: 10px;\r\n  height: 10px;\r\n  transform: rotate(45deg);\r\n  background: var(--grey-light);\r\n}\r\n.el-popper.is-light .el-popper__arrow::before {\r\n  border: 1px solid #bdbdbd;\r\n  background: var(--grey-light);\r\n}\r\n.el-popper[data-popper-placement^=\"bottom\"] > .el-popper__arrow::before {\r\n  border-top-left-radius: 2px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}