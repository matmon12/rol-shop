{"ast":null,"code":"import { defineComponent, ref, computed, toRef, watch, useSlots, provide, openBlock, createElementBlock, Fragment, createBlock, Teleport, createElementVNode, mergeProps, unref, createVNode, normalizeStyle, withCtx, renderSlot, createCommentVNode } from 'vue';\nimport { useVModel } from '@vueuse/core';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport ElTourMask from './mask2.mjs';\nimport ElTourContent from './content2.mjs';\nimport ElTourSteps from './steps.mjs';\nimport { tourProps, tourEmits } from './tour.mjs';\nimport { useTarget, tourKey } from './helper.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isBoolean } from '../../../utils/types.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nconst __default__ = defineComponent({\n  name: \"ElTour\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: tourProps,\n  emits: tourEmits,\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"tour\");\n    const steps = ref([]);\n    const current = useVModel(props, \"current\", emit, {\n      passive: true\n    });\n    const total = computed(() => steps.value.length);\n    const currentStep = computed(() => steps.value[current.value] || {});\n    const currentTarget = computed(() => currentStep.value.target);\n    const kls = computed(() => [ns.b(), mergedType.value === \"primary\" ? ns.m(\"primary\") : \"\"]);\n    const mergedPlacement = computed(() => currentStep.value.placement || props.placement);\n    const mergedContentStyle = computed(() => {\n      var _a;\n      return (_a = currentStep.value.contentStyle) != null ? _a : props.contentStyle;\n    });\n    const mergedMask = computed(() => {\n      var _a;\n      return (_a = currentStep.value.mask) != null ? _a : props.mask;\n    });\n    const mergedShowMask = computed(() => !!mergedMask.value && props.modelValue);\n    const mergedMaskStyle = computed(() => isBoolean(mergedMask.value) ? void 0 : mergedMask.value);\n    const mergedShowArrow = computed(() => {\n      var _a;\n      return !!currentTarget.value && ((_a = currentStep.value.showArrow) != null ? _a : props.showArrow);\n    });\n    const mergedScrollIntoViewOptions = computed(() => {\n      var _a;\n      return (_a = currentStep.value.scrollIntoViewOptions) != null ? _a : props.scrollIntoViewOptions;\n    });\n    const mergedType = computed(() => {\n      var _a;\n      return (_a = currentStep.value.type) != null ? _a : props.type;\n    });\n    const {\n      nextZIndex\n    } = useZIndex();\n    const nowZIndex = nextZIndex();\n    const mergedZIndex = computed(() => {\n      var _a;\n      return (_a = props.zIndex) != null ? _a : nowZIndex;\n    });\n    const {\n      mergedPosInfo: pos,\n      triggerTarget\n    } = useTarget(currentTarget, toRef(props, \"modelValue\"), toRef(props, \"gap\"), mergedMask, mergedScrollIntoViewOptions);\n    watch(() => props.modelValue, val => {\n      if (!val) {\n        current.value = 0;\n      }\n    });\n    const onUpdateSteps = v => {\n      steps.value = v;\n    };\n    const onEscClose = () => {\n      if (props.closeOnPressEscape) {\n        emit(\"update:modelValue\", false);\n        emit(\"close\", current.value);\n      }\n    };\n    const slots = useSlots();\n    provide(tourKey, {\n      current,\n      total,\n      showClose: toRef(props, \"showClose\"),\n      closeIcon: toRef(props, \"closeIcon\"),\n      mergedType,\n      ns,\n      slots,\n      updateModelValue(modelValue) {\n        emit(\"update:modelValue\", modelValue);\n      },\n      onClose() {\n        emit(\"close\", current.value);\n      },\n      onFinish() {\n        emit(\"finish\");\n      },\n      onChange() {\n        emit(\"change\", current.value);\n      }\n    });\n    return (_ctx, _cache) => {\n      var _a, _b;\n      return openBlock(), createElementBlock(Fragment, null, [(openBlock(), createBlock(Teleport, {\n        to: _ctx.appendTo\n      }, [createElementVNode(\"div\", mergeProps({\n        class: unref(kls)\n      }, _ctx.$attrs), [createVNode(ElTourMask, {\n        visible: unref(mergedShowMask),\n        fill: (_a = unref(mergedMaskStyle)) == null ? void 0 : _a.color,\n        style: normalizeStyle((_b = unref(mergedMaskStyle)) == null ? void 0 : _b.style),\n        pos: unref(pos),\n        \"z-index\": unref(mergedZIndex),\n        \"target-area-clickable\": _ctx.targetAreaClickable\n      }, null, 8, [\"visible\", \"fill\", \"style\", \"pos\", \"z-index\", \"target-area-clickable\"]), _ctx.modelValue ? (openBlock(), createBlock(ElTourContent, {\n        key: unref(current),\n        reference: unref(triggerTarget),\n        placement: unref(mergedPlacement),\n        \"show-arrow\": unref(mergedShowArrow),\n        \"z-index\": unref(mergedZIndex),\n        style: normalizeStyle(unref(mergedContentStyle)),\n        onClose: onEscClose\n      }, {\n        default: withCtx(() => [createVNode(unref(ElTourSteps), {\n          current: unref(current),\n          onUpdateSteps\n        }, {\n          default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n          _: 3\n        }, 8, [\"current\"])]),\n        _: 3\n      }, 8, [\"reference\", \"placement\", \"show-arrow\", \"z-index\", \"style\"])) : createCommentVNode(\"v-if\", true)], 16)], 8, [\"to\"])), createCommentVNode(\" just for IDE \"), false ? renderSlot(_ctx.$slots, \"indicators\", {\n        key: 0,\n        current: unref(current) + 1,\n        total: unref(total)\n      }) : createCommentVNode(\"v-if\", true)], 64);\n    };\n  }\n});\nvar Tour = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"tour.vue\"]]);\nexport { Tour as default };","map":{"version":3,"names":["name","ns","useNamespace","steps","ref","current","useVModel","props","emit","passive","total","computed","value","length","currentStep","currentTarget","target","kls","b","mergedType","m","mergedPlacement","placement","mergedContentStyle","_a","contentStyle","mergedMask","mask","mergedShowMask","modelValue","mergedMaskStyle","isBoolean","mergedShowArrow","showArrow","mergedScrollIntoViewOptions","scrollIntoViewOptions","type","nextZIndex","useZIndex","nowZIndex","mergedZIndex","zIndex","mergedPosInfo","pos","triggerTarget","useTarget","toRef","watch","val","onUpdateSteps","v","onEscClose","closeOnPressEscape","slots","useSlots","provide","tourKey"],"sources":["../../../../../../packages/components/tour/src/tour.vue"],"sourcesContent":["<template>\n  <teleport :to=\"appendTo\">\n    <div :class=\"kls\" v-bind=\"$attrs\">\n      <el-tour-mask\n        :visible=\"mergedShowMask\"\n        :fill=\"mergedMaskStyle?.color\"\n        :style=\"mergedMaskStyle?.style\"\n        :pos=\"pos\"\n        :z-index=\"mergedZIndex\"\n        :target-area-clickable=\"targetAreaClickable\"\n      />\n      <el-tour-content\n        v-if=\"modelValue\"\n        :key=\"current\"\n        :reference=\"triggerTarget\"\n        :placement=\"mergedPlacement\"\n        :show-arrow=\"mergedShowArrow\"\n        :z-index=\"mergedZIndex\"\n        :style=\"mergedContentStyle\"\n        @close=\"onEscClose\"\n      >\n        <el-tour-steps :current=\"current\" @update-steps=\"onUpdateSteps\">\n          <slot />\n        </el-tour-steps>\n      </el-tour-content>\n    </div>\n  </teleport>\n  <!-- just for IDE -->\n  <slot v-if=\"false\" name=\"indicators\" :current=\"current + 1\" :total=\"total\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, provide, ref, toRef, useSlots, watch } from 'vue'\nimport { useVModel } from '@vueuse/core'\nimport { useNamespace, useZIndex } from '@element-plus/hooks'\nimport { isBoolean } from '@element-plus/utils'\nimport ElTourMask from './mask.vue'\nimport ElTourContent from './content.vue'\nimport ElTourSteps from './steps'\nimport { tourEmits, tourProps } from './tour'\nimport { tourKey, useTarget } from './helper'\nimport type { UsedTourStepProps } from './types'\n\ndefineOptions({\n  name: 'ElTour',\n})\n\nconst props = defineProps(tourProps)\nconst emit = defineEmits(tourEmits)\n\nconst ns = useNamespace('tour')\nconst steps = ref<UsedTourStepProps[]>([])\n\nconst current = useVModel(props, 'current', emit, {\n  passive: true,\n})\nconst total = computed(() => steps.value.length)\n\nconst currentStep = computed(() => steps.value[current.value] || {})\nconst currentTarget = computed(() => currentStep.value.target)\n\nconst kls = computed(() => [\n  ns.b(),\n  mergedType.value === 'primary' ? ns.m('primary') : '',\n])\n\nconst mergedPlacement = computed(\n  () => currentStep.value.placement || props.placement\n)\n\nconst mergedContentStyle = computed(\n  () => currentStep.value.contentStyle ?? props.contentStyle\n)\n\nconst mergedMask = computed(() => currentStep.value.mask ?? props.mask)\nconst mergedShowMask = computed(() => !!mergedMask.value && props.modelValue)\nconst mergedMaskStyle = computed(() =>\n  isBoolean(mergedMask.value) ? undefined : mergedMask.value\n)\n\nconst mergedShowArrow = computed(\n  () =>\n    !!currentTarget.value && (currentStep.value.showArrow ?? props.showArrow)\n)\n\nconst mergedScrollIntoViewOptions = computed(\n  () => currentStep.value.scrollIntoViewOptions ?? props.scrollIntoViewOptions\n)\nconst mergedType = computed(() => currentStep.value.type ?? props.type)\n\nconst { nextZIndex } = useZIndex()\nconst nowZIndex = nextZIndex()\nconst mergedZIndex = computed(() => props.zIndex ?? nowZIndex)\n\nconst { mergedPosInfo: pos, triggerTarget } = useTarget(\n  currentTarget,\n  toRef(props, 'modelValue'),\n  toRef(props, 'gap'),\n  mergedMask,\n  mergedScrollIntoViewOptions\n)\n\nwatch(\n  () => props.modelValue,\n  (val) => {\n    if (!val) {\n      current.value = 0\n    }\n  }\n)\n\nconst onUpdateSteps = (v: any) => {\n  steps.value = v\n}\n\nconst onEscClose = () => {\n  if (props.closeOnPressEscape) {\n    emit('update:modelValue', false)\n    emit('close', current.value)\n  }\n}\n\nconst slots = useSlots()\n\nprovide(tourKey, {\n  current,\n  total,\n  showClose: toRef(props, 'showClose'),\n  closeIcon: toRef(props, 'closeIcon') as any,\n  mergedType: mergedType as any,\n  ns,\n  slots,\n  updateModelValue(modelValue) {\n    emit('update:modelValue', modelValue)\n  },\n  onClose() {\n    emit('close', current.value)\n  },\n  onFinish() {\n    emit('finish')\n  },\n  onChange() {\n    emit('change', current.value)\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}