{"ast":null,"code":"import axios from \"axios\";\nimport * as turf from \"@turf/turf\";\nexport const mapCheckModule = {\n  state: () => ({\n    deliveryPossible: false\n  }),\n  mutations: {\n    setDeliveryPossible(state, deliveryPossible) {\n      state.deliveryPossible = deliveryPossible;\n    }\n  },\n  actions: {\n    async checkAddress(polygonCoord1, polygonCoord2, polygonCoord3, lat, long) {\n      try {\n        console.log;\n        var polygon1 = turf.polygon([polygonCoord1]);\n        var polygon2 = turf.polygon([polygonCoord2]);\n        var polygon3 = turf.polygon([polygonCoord3]);\n\n        // Создаем точки\n        var points = turf.points([[lat, long]]);\n\n        // Проверяем точки внутри полигона\n        var pointsWithin1 = turf.pointsWithinPolygon(points, polygon1);\n        var pointsWithin2 = turf.pointsWithinPolygon(points, polygon2);\n        var pointsWithin3 = turf.pointsWithinPolygon(points, polygon3);\n        if (pointsWithin1.features.length > 0 || pointsWithin2.features.length > 0) {\n          commit('setDeliveryPossible', true);\n        } else {\n          commit('setDeliveryPossible', false);\n        }\n        const {\n          data\n        } = await axios.get(`https://geocode-maps.yandex.ru/1.x/?apikey=37720b8b-dc03-4346-b6a4-3ae3458e9af6&geocode=${lat},${long}&format=json&lang=ru_RU`);\n        const path = data.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData;\n        const filteredArray = path.Address.Components.filter(item => [\"street\", \"metro\", \"district\", \"area\", \"province\", \"railway_station\", \"station\", \"vegetation\", \"other\", \"house\"].includes(item.kind));\n        const names = filteredArray.map(item => item.name).join(\", \");\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  },\n  namespaced: true\n};","map":{"version":3,"names":["axios","turf","mapCheckModule","state","deliveryPossible","mutations","setDeliveryPossible","actions","checkAddress","polygonCoord1","polygonCoord2","polygonCoord3","lat","long","console","log","polygon1","polygon","polygon2","polygon3","points","pointsWithin1","pointsWithinPolygon","pointsWithin2","pointsWithin3","features","length","commit","data","get","path","response","GeoObjectCollection","featureMember","GeoObject","metaDataProperty","GeocoderMetaData","filteredArray","Address","Components","filter","item","includes","kind","names","map","name","join","err","namespaced"],"sources":["C:/gitPages/rol-shop/src/store/mapCheckModule.js"],"sourcesContent":["import axios from \"axios\";\r\nimport * as turf from \"@turf/turf\";\r\n\r\nexport const mapCheckModule = {\r\n  state: () => ({\r\n    deliveryPossible: false\r\n  }),\r\n  mutations: {\r\n    setDeliveryPossible(state, deliveryPossible) {\r\n      state.deliveryPossible = deliveryPossible;\r\n    }\r\n  },\r\n  actions: {\r\n    async checkAddress(polygonCoord1, polygonCoord2, polygonCoord3, lat, long) {\r\n      try {\r\n        console.log\r\n        var polygon1 = turf.polygon([polygonCoord1]);\r\n        var polygon2 = turf.polygon([polygonCoord2]);\r\n        var polygon3 = turf.polygon([polygonCoord3]);\r\n\r\n        // Создаем точки\r\n        var points = turf.points([[lat, long]]);\r\n\r\n        // Проверяем точки внутри полигона\r\n        var pointsWithin1 = turf.pointsWithinPolygon(points, polygon1);\r\n        var pointsWithin2 = turf.pointsWithinPolygon(points, polygon2);\r\n        var pointsWithin3 = turf.pointsWithinPolygon(points, polygon3);\r\n\r\n        if (pointsWithin1.features.length > 0 || pointsWithin2.features.length > 0) {\r\n          commit('setDeliveryPossible', true)\r\n        } else {\r\n          commit('setDeliveryPossible', false)   \r\n        }\r\n\r\n        const { data } = await axios.get(\r\n          `https://geocode-maps.yandex.ru/1.x/?apikey=37720b8b-dc03-4346-b6a4-3ae3458e9af6&geocode=${lat},${long}&format=json&lang=ru_RU`\r\n        );\r\n\r\n        const path =\r\n          data.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty\r\n            .GeocoderMetaData;\r\n        const filteredArray = path.Address.Components.filter((item) =>\r\n          [\r\n            \"street\",\r\n            \"metro\",\r\n            \"district\",\r\n            \"area\",\r\n            \"province\",\r\n            \"railway_station\",\r\n            \"station\",\r\n            \"vegetation\",\r\n            \"other\",\r\n            \"house\",\r\n          ].includes(item.kind)\r\n        );\r\n        const names = filteredArray.map((item) => item.name).join(\", \");\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    },\r\n  },\r\n  namespaced: true\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,IAAI,MAAM,YAAY;AAElC,OAAO,MAAMC,cAAc,GAAG;EAC5BC,KAAK,EAAEA,CAAA,MAAO;IACZC,gBAAgB,EAAE;EACpB,CAAC,CAAC;EACFC,SAAS,EAAE;IACTC,mBAAmBA,CAACH,KAAK,EAAEC,gBAAgB,EAAE;MAC3CD,KAAK,CAACC,gBAAgB,GAAGA,gBAAgB;IAC3C;EACF,CAAC;EACDG,OAAO,EAAE;IACP,MAAMC,YAAYA,CAACC,aAAa,EAAEC,aAAa,EAAEC,aAAa,EAAEC,GAAG,EAAEC,IAAI,EAAE;MACzE,IAAI;QACFC,OAAO,CAACC,GAAG;QACX,IAAIC,QAAQ,GAAGf,IAAI,CAACgB,OAAO,CAAC,CAACR,aAAa,CAAC,CAAC;QAC5C,IAAIS,QAAQ,GAAGjB,IAAI,CAACgB,OAAO,CAAC,CAACP,aAAa,CAAC,CAAC;QAC5C,IAAIS,QAAQ,GAAGlB,IAAI,CAACgB,OAAO,CAAC,CAACN,aAAa,CAAC,CAAC;;QAE5C;QACA,IAAIS,MAAM,GAAGnB,IAAI,CAACmB,MAAM,CAAC,CAAC,CAACR,GAAG,EAAEC,IAAI,CAAC,CAAC,CAAC;;QAEvC;QACA,IAAIQ,aAAa,GAAGpB,IAAI,CAACqB,mBAAmB,CAACF,MAAM,EAAEJ,QAAQ,CAAC;QAC9D,IAAIO,aAAa,GAAGtB,IAAI,CAACqB,mBAAmB,CAACF,MAAM,EAAEF,QAAQ,CAAC;QAC9D,IAAIM,aAAa,GAAGvB,IAAI,CAACqB,mBAAmB,CAACF,MAAM,EAAED,QAAQ,CAAC;QAE9D,IAAIE,aAAa,CAACI,QAAQ,CAACC,MAAM,GAAG,CAAC,IAAIH,aAAa,CAACE,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;UAC1EC,MAAM,CAAC,qBAAqB,EAAE,IAAI,CAAC;QACrC,CAAC,MAAM;UACLA,MAAM,CAAC,qBAAqB,EAAE,KAAK,CAAC;QACtC;QAEA,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAM5B,KAAK,CAAC6B,GAAG,CAC7B,2FAA0FjB,GAAI,IAAGC,IAAK,yBACzG,CAAC;QAED,MAAMiB,IAAI,GACRF,IAAI,CAACG,QAAQ,CAACC,mBAAmB,CAACC,aAAa,CAAC,CAAC,CAAC,CAACC,SAAS,CAACC,gBAAgB,CAC1EC,gBAAgB;QACrB,MAAMC,aAAa,GAAGP,IAAI,CAACQ,OAAO,CAACC,UAAU,CAACC,MAAM,CAAEC,IAAI,IACxD,CACE,QAAQ,EACR,OAAO,EACP,UAAU,EACV,MAAM,EACN,UAAU,EACV,iBAAiB,EACjB,SAAS,EACT,YAAY,EACZ,OAAO,EACP,OAAO,CACR,CAACC,QAAQ,CAACD,IAAI,CAACE,IAAI,CACtB,CAAC;QACD,MAAMC,KAAK,GAAGP,aAAa,CAACQ,GAAG,CAAEJ,IAAI,IAAKA,IAAI,CAACK,IAAI,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MACjE,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZlC,OAAO,CAACC,GAAG,CAACiC,GAAG,CAAC;MAClB;IACF;EACF,CAAC;EACDC,UAAU,EAAE;AACd,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}