{"ast":null,"code":"import axios from \"axios\";\nimport * as turf from \"@turf/turf\";\nexport const mapCheckModule = {\n  state: () => ({\n    deliveryPossible: false,\n    polygonCoord1: [[30.525609135265174, 50.41581452769492], [30.526797353858758, 50.41704674162194], [30.526598870391656, 50.41866108161345], [30.52590149604774, 50.41975098688669], [30.522425353164497, 50.421245281434295], [30.520730197067063, 50.420923121020905], [30.519861161346252, 50.42113218281552], [30.518546878928944, 50.421085915120884], [30.516867816085664, 50.4219307217831], [30.516213357085984, 50.42147833226991], [30.514341175193604, 50.42149889552497], [30.514306306476406, 50.42091969376908], [30.513816803331178, 50.42012285131241], [30.514151408905786, 50.419628459485686], [30.514855153496086, 50.419490937093364], [30.511780252317603, 50.41692709917943], [30.511058193268894, 50.416591145423126], [30.513336457415182, 50.415518278488875], [30.512651687358204, 50.41437855989807], [30.514337052344967, 50.412067352083284], [30.517937897914575, 50.4115187660733], [30.521717249984505, 50.411127021711366], [30.524810301794076, 50.41173932782978], [30.52592295371987, 50.413128909469826], [30.525609135265174, 50.41581452769492]],\n    polygonCoord2: [[30.5098794981063, 50.42628119920888], [30.51226666412955, 50.42715846727746], [30.515678433996502, 50.427624509288435], [30.519663852782916, 50.42687216158533], [30.521460589013188, 50.4251054368052], [30.523487651409056, 50.42316198375982], [30.522434850236454, 50.421248960895035], [30.520720293229566, 50.420928888987], [30.519875737450686, 50.42112499152181], [30.51855433089325, 50.421092218566464], [30.516854434264705, 50.421924601598306], [30.516223597234163, 50.42147820963046], [30.514348058325066, 50.421503913674094], [30.514144210439984, 50.421891186574015], [30.5143856092513, 50.42240012001261], [30.513015000444693, 50.422764252515826], [30.510881303173356, 50.42282294184412], [30.50966711301253, 50.42317672311909], [30.509595183950726, 50.42445807423617], [30.5098794981063, 50.42628119920888]],\n    polygonCoord3: [[30.53565310831554, 50.42189449360963], [30.5346124950368, 50.42341715413044], [30.532402522446606, 50.42341918895238], [30.53107248205133, 50.42301200861088], [30.531845628799886, 50.422115385518396], [30.530302017511836, 50.42210424723551], [30.529532223524566, 50.422356143130784], [30.529237180532984, 50.42143423186331], [30.527660041632206, 50.42115319955797], [30.52844324666457, 50.42007703597716], [30.528512984098914, 50.41931959400213], [30.52893409091424, 50.41809086697714], [30.52965962845278, 50.41718858049145], [30.529550328435437, 50.416257570671156], [30.52876611757469, 50.4151750826024], [30.535583789976325, 50.415936340165416], [30.53519461821206, 50.41676940341607], [30.536759561443716, 50.4170076980345], [30.540460276467726, 50.41663327851576], [30.54059901792002, 50.417931489990465], [30.540084033789153, 50.42026211044566], [30.53836742001964, 50.42146850397636], [30.537101417364596, 50.42168784493982], [30.53565310831554, 50.42189449360963]],\n    coord: [30.523745, 50.418901],\n    deliveryCheck: false,\n    address: \"\",\n    loading: false,\n    loadingAddress: false,\n    arrayCoord: []\n  }),\n  mutations: {\n    setDeliveryPossible(state, deliveryPossible) {\n      state.deliveryPossible = deliveryPossible;\n    },\n    setDeliveryCheck(state, deliveryCheck) {\n      state.deliveryCheck = deliveryCheck;\n    },\n    setAddress(state, address) {\n      state.address = address;\n    },\n    setLoading(state, loading) {\n      state.loading = loading;\n    },\n    setLoadingAddress(state, loadingAddress) {\n      state.loadingAddress = loadingAddress;\n    },\n    setArrayCoord(state, arrayCoord) {\n      state.arrayCoord = arrayCoord;\n    }\n  },\n  actions: {\n    async checkAddress({\n      state,\n      commit\n    }, {\n      lat,\n      long\n    }) {\n      try {\n        commit(\"setDeliveryCheck\", true);\n        commit(\"setLoading\", true);\n        var polygon1 = turf.polygon([state.polygonCoord1]);\n        var polygon2 = turf.polygon([state.polygonCoord2]);\n        var polygon3 = turf.polygon([state.polygonCoord3]);\n\n        // Создаем точки\n        var points = turf.points([[lat, long]]);\n\n        // Проверяем точки внутри полигона\n        var pointsWithin1 = turf.pointsWithinPolygon(points, polygon1);\n        var pointsWithin2 = turf.pointsWithinPolygon(points, polygon2);\n        var pointsWithin3 = turf.pointsWithinPolygon(points, polygon3);\n        if (pointsWithin1.features.length > 0 || pointsWithin2.features.length > 0) {\n          commit(\"setDeliveryPossible\", true);\n        } else {\n          commit(\"setDeliveryPossible\", false);\n        }\n        const {\n          data\n        } = await axios.get(`https://geocode-maps.yandex.ru/1.x/?apikey=37720b8b-dc03-4346-b6a4-3ae3458e9af6&geocode=${lat},${long}&format=json&lang=ru_RU`);\n        const path = data.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData;\n        const filteredArray = path.Address.Components.filter(item => [\"street\", \"metro\", \"district\", \"area\", \"province\", \"railway_station\", \"station\", \"vegetation\", \"other\", \"house\"].includes(item.kind));\n        const names = filteredArray.map(item => item.name).join(\", \");\n        commit(\"setAddress\", names);\n      } catch (err) {\n        console.log(err);\n      } finally {\n        commit(\"setLoading\", false);\n      }\n    },\n    async geocoderAddress({\n      state,\n      commit\n    }, item) {\n      try {\n        commit('setLoadingAddress');\n        const {\n          data\n        } = await axios.get(`https://geocode-maps.yandex.ru/1.x/?apikey=37720b8b-dc03-4346-b6a4-3ae3458e9af6&geocode=${item}&format=json&lang=ru_RU`);\n        const address = data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos;\n        commit('setArrayCoord', address.split(\" \"));\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  },\n  namespaced: true\n};","map":{"version":3,"names":["axios","turf","mapCheckModule","state","deliveryPossible","polygonCoord1","polygonCoord2","polygonCoord3","coord","deliveryCheck","address","loading","loadingAddress","arrayCoord","mutations","setDeliveryPossible","setDeliveryCheck","setAddress","setLoading","setLoadingAddress","setArrayCoord","actions","checkAddress","commit","lat","long","polygon1","polygon","polygon2","polygon3","points","pointsWithin1","pointsWithinPolygon","pointsWithin2","pointsWithin3","features","length","data","get","path","response","GeoObjectCollection","featureMember","GeoObject","metaDataProperty","GeocoderMetaData","filteredArray","Address","Components","filter","item","includes","kind","names","map","name","join","err","console","log","geocoderAddress","Point","pos","split","namespaced"],"sources":["C:/gitPages/rol-shop/src/store/mapCheckModule.js"],"sourcesContent":["import axios from \"axios\";\r\nimport * as turf from \"@turf/turf\";\r\n\r\nexport const mapCheckModule = {\r\n  state: () => ({\r\n    deliveryPossible: false,\r\n    polygonCoord1: [\r\n      [30.525609135265174, 50.41581452769492],\r\n      [30.526797353858758, 50.41704674162194],\r\n      [30.526598870391656, 50.41866108161345],\r\n      [30.52590149604774, 50.41975098688669],\r\n      [30.522425353164497, 50.421245281434295],\r\n      [30.520730197067063, 50.420923121020905],\r\n      [30.519861161346252, 50.42113218281552],\r\n      [30.518546878928944, 50.421085915120884],\r\n      [30.516867816085664, 50.4219307217831],\r\n      [30.516213357085984, 50.42147833226991],\r\n      [30.514341175193604, 50.42149889552497],\r\n      [30.514306306476406, 50.42091969376908],\r\n      [30.513816803331178, 50.42012285131241],\r\n      [30.514151408905786, 50.419628459485686],\r\n      [30.514855153496086, 50.419490937093364],\r\n      [30.511780252317603, 50.41692709917943],\r\n      [30.511058193268894, 50.416591145423126],\r\n      [30.513336457415182, 50.415518278488875],\r\n      [30.512651687358204, 50.41437855989807],\r\n      [30.514337052344967, 50.412067352083284],\r\n      [30.517937897914575, 50.4115187660733],\r\n      [30.521717249984505, 50.411127021711366],\r\n      [30.524810301794076, 50.41173932782978],\r\n      [30.52592295371987, 50.413128909469826],\r\n      [30.525609135265174, 50.41581452769492],\r\n    ],\r\n    polygonCoord2: [\r\n      [30.5098794981063, 50.42628119920888],\r\n      [30.51226666412955, 50.42715846727746],\r\n      [30.515678433996502, 50.427624509288435],\r\n      [30.519663852782916, 50.42687216158533],\r\n      [30.521460589013188, 50.4251054368052],\r\n      [30.523487651409056, 50.42316198375982],\r\n      [30.522434850236454, 50.421248960895035],\r\n      [30.520720293229566, 50.420928888987],\r\n      [30.519875737450686, 50.42112499152181],\r\n      [30.51855433089325, 50.421092218566464],\r\n      [30.516854434264705, 50.421924601598306],\r\n      [30.516223597234163, 50.42147820963046],\r\n      [30.514348058325066, 50.421503913674094],\r\n      [30.514144210439984, 50.421891186574015],\r\n      [30.5143856092513, 50.42240012001261],\r\n      [30.513015000444693, 50.422764252515826],\r\n      [30.510881303173356, 50.42282294184412],\r\n      [30.50966711301253, 50.42317672311909],\r\n      [30.509595183950726, 50.42445807423617],\r\n      [30.5098794981063, 50.42628119920888],\r\n    ],\r\n    polygonCoord3: [\r\n      [30.53565310831554, 50.42189449360963],\r\n      [30.5346124950368, 50.42341715413044],\r\n      [30.532402522446606, 50.42341918895238],\r\n      [30.53107248205133, 50.42301200861088],\r\n      [30.531845628799886, 50.422115385518396],\r\n      [30.530302017511836, 50.42210424723551],\r\n      [30.529532223524566, 50.422356143130784],\r\n      [30.529237180532984, 50.42143423186331],\r\n      [30.527660041632206, 50.42115319955797],\r\n      [30.52844324666457, 50.42007703597716],\r\n      [30.528512984098914, 50.41931959400213],\r\n      [30.52893409091424, 50.41809086697714],\r\n      [30.52965962845278, 50.41718858049145],\r\n      [30.529550328435437, 50.416257570671156],\r\n      [30.52876611757469, 50.4151750826024],\r\n      [30.535583789976325, 50.415936340165416],\r\n      [30.53519461821206, 50.41676940341607],\r\n      [30.536759561443716, 50.4170076980345],\r\n      [30.540460276467726, 50.41663327851576],\r\n      [30.54059901792002, 50.417931489990465],\r\n      [30.540084033789153, 50.42026211044566],\r\n      [30.53836742001964, 50.42146850397636],\r\n      [30.537101417364596, 50.42168784493982],\r\n      [30.53565310831554, 50.42189449360963],\r\n    ],\r\n    coord: [30.523745, 50.418901],\r\n    deliveryCheck: false,\r\n    address: \"\",\r\n    loading: false,\r\n    loadingAddress: false,\r\n    arrayCoord: []\r\n  }),\r\n  mutations: {\r\n    setDeliveryPossible(state, deliveryPossible) {\r\n      state.deliveryPossible = deliveryPossible;\r\n    },\r\n    setDeliveryCheck(state, deliveryCheck) {\r\n      state.deliveryCheck = deliveryCheck;\r\n    },\r\n    setAddress(state, address) {\r\n      state.address = address;\r\n    },\r\n    setLoading(state, loading) {\r\n      state.loading = loading;\r\n    },\r\n    setLoadingAddress(state, loadingAddress) {\r\n      state.loadingAddress = loadingAddress;\r\n    },\r\n    setArrayCoord(state, arrayCoord) {\r\n      state.arrayCoord = arrayCoord;\r\n    }\r\n  },\r\n  actions: {\r\n    async checkAddress({ state, commit }, { lat, long }) {\r\n      try {\r\n        commit(\"setDeliveryCheck\", true);\r\n        commit(\"setLoading\", true);\r\n\r\n        var polygon1 = turf.polygon([state.polygonCoord1]);\r\n        var polygon2 = turf.polygon([state.polygonCoord2]);\r\n        var polygon3 = turf.polygon([state.polygonCoord3]);\r\n\r\n        // Создаем точки\r\n        var points = turf.points([[lat, long]]);\r\n\r\n        // Проверяем точки внутри полигона\r\n        var pointsWithin1 = turf.pointsWithinPolygon(points, polygon1);\r\n        var pointsWithin2 = turf.pointsWithinPolygon(points, polygon2);\r\n        var pointsWithin3 = turf.pointsWithinPolygon(points, polygon3);\r\n\r\n        if (\r\n          pointsWithin1.features.length > 0 ||\r\n          pointsWithin2.features.length > 0\r\n        ) {\r\n          commit(\"setDeliveryPossible\", true);\r\n        } else {\r\n          commit(\"setDeliveryPossible\", false);\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n          `https://geocode-maps.yandex.ru/1.x/?apikey=37720b8b-dc03-4346-b6a4-3ae3458e9af6&geocode=${lat},${long}&format=json&lang=ru_RU`\r\n        );\r\n\r\n        const path =\r\n          data.response.GeoObjectCollection.featureMember[0].GeoObject\r\n            .metaDataProperty.GeocoderMetaData;\r\n        const filteredArray = path.Address.Components.filter((item) =>\r\n          [\r\n            \"street\",\r\n            \"metro\",\r\n            \"district\",\r\n            \"area\",\r\n            \"province\",\r\n            \"railway_station\",\r\n            \"station\",\r\n            \"vegetation\",\r\n            \"other\",\r\n            \"house\",\r\n          ].includes(item.kind)\r\n        );\r\n        const names = filteredArray.map((item) => item.name).join(\", \");\r\n        commit(\"setAddress\", names);\r\n      } catch (err) {\r\n        console.log(err);\r\n      } finally {\r\n        commit(\"setLoading\", false);\r\n      }\r\n    },\r\n    async geocoderAddress({ state, commit }, item) {\r\n      try {\r\n        commit('setLoadingAddress', )\r\n\r\n        const { data } = await axios.get(\r\n          `https://geocode-maps.yandex.ru/1.x/?apikey=37720b8b-dc03-4346-b6a4-3ae3458e9af6&geocode=${item}&format=json&lang=ru_RU`\r\n        );\r\n\r\n        const address =\r\n          data.response.GeoObjectCollection.featureMember[0].GeoObject.Point\r\n            .pos;\r\n\r\n        commit('setArrayCoord', address.split(\" \"));\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    },\r\n  },\r\n  namespaced: true,\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}