{"ast":null,"code":"import axios from \"axios\";\nimport * as turf from \"@turf/turf\";\nexport default mapCheckModule = {\n  state: () => ({}),\n  actions: {\n    async checkAddress() {\n      try {\n        var polygon1 = turf.polygon([this.polygonCoord1]);\n        var polygon2 = turf.polygon([this.polygonCoord2]);\n        var polygon3 = turf.polygon([this.polygonCoord3]);\n\n        // Создаем точки\n        var points = turf.points([[this.lat, this.long]]);\n\n        // Проверяем точки внутри полигона\n        var pointsWithin1 = turf.pointsWithinPolygon(points, polygon1);\n        var pointsWithin2 = turf.pointsWithinPolygon(points, polygon2);\n        var pointsWithin3 = turf.pointsWithinPolygon(points, polygon3);\n        if (pointsWithin1.features.length > 0 || pointsWithin2.features.length > 0) {\n          this.deliveryPossible = true;\n        } else {\n          this.deliveryPossible = false;\n        }\n        const {\n          data\n        } = await axios.get(`https://geocode-maps.yandex.ru/1.x/?apikey=37720b8b-dc03-4346-b6a4-3ae3458e9af6&geocode=${this.lat},${this.long}&format=json&lang=ru_RU`);\n        const path = data.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData;\n        const filteredArray = path.Address.Components.filter(item => [\"street\", \"metro\", \"district\", \"area\", \"province\", \"railway_station\", \"station\", \"vegetation\", \"other\", \"house\"].includes(item.kind));\n        const names = filteredArray.map(item => item.name).join(\", \");\n        this.addressDialog = names;\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  },\n  namespaced: true\n};","map":{"version":3,"names":["axios","turf","mapCheckModule","state","actions","checkAddress","polygon1","polygon","polygonCoord1","polygon2","polygonCoord2","polygon3","polygonCoord3","points","lat","long","pointsWithin1","pointsWithinPolygon","pointsWithin2","pointsWithin3","features","length","deliveryPossible","data","get","path","response","GeoObjectCollection","featureMember","GeoObject","metaDataProperty","GeocoderMetaData","filteredArray","Address","Components","filter","item","includes","kind","names","map","name","join","addressDialog","err","console","log","namespaced"],"sources":["C:/gitPages/rol-shop/src/store/mapCheckModule.js"],"sourcesContent":["import axios from \"axios\";\r\nimport * as turf from \"@turf/turf\";\r\n\r\nexport default mapCheckModule = {\r\n  state: () => ({\r\n\r\n  }),\r\n  actions: {\r\n    async checkAddress() {\r\n      try {\r\n        var polygon1 = turf.polygon([this.polygonCoord1]);\r\n        var polygon2 = turf.polygon([this.polygonCoord2]);\r\n        var polygon3 = turf.polygon([this.polygonCoord3]);\r\n\r\n        // Создаем точки\r\n        var points = turf.points([[this.lat, this.long]]);\r\n\r\n        // Проверяем точки внутри полигона\r\n        var pointsWithin1 = turf.pointsWithinPolygon(points, polygon1);\r\n        var pointsWithin2 = turf.pointsWithinPolygon(points, polygon2);\r\n        var pointsWithin3 = turf.pointsWithinPolygon(points, polygon3);\r\n\r\n        if (pointsWithin1.features.length > 0 || pointsWithin2.features.length > 0) {\r\n          this.deliveryPossible = true;\r\n        } else {\r\n          this.deliveryPossible = false;   \r\n        }\r\n\r\n        const { data } = await axios.get(\r\n          `https://geocode-maps.yandex.ru/1.x/?apikey=37720b8b-dc03-4346-b6a4-3ae3458e9af6&geocode=${this.lat},${this.long}&format=json&lang=ru_RU`\r\n        );\r\n\r\n        const path =\r\n          data.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty\r\n            .GeocoderMetaData;\r\n        const filteredArray = path.Address.Components.filter((item) =>\r\n          [\r\n            \"street\",\r\n            \"metro\",\r\n            \"district\",\r\n            \"area\",\r\n            \"province\",\r\n            \"railway_station\",\r\n            \"station\",\r\n            \"vegetation\",\r\n            \"other\",\r\n            \"house\",\r\n          ].includes(item.kind)\r\n        );\r\n        const names = filteredArray.map((item) => item.name).join(\", \");\r\n        this.addressDialog = names;\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    },\r\n  },\r\n  namespaced: true\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,IAAI,MAAM,YAAY;AAElC,eAAeC,cAAc,GAAG;EAC9BC,KAAK,EAAEA,CAAA,MAAO,CAEd,CAAC,CAAC;EACFC,OAAO,EAAE;IACP,MAAMC,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,IAAIC,QAAQ,GAAGL,IAAI,CAACM,OAAO,CAAC,CAAC,IAAI,CAACC,aAAa,CAAC,CAAC;QACjD,IAAIC,QAAQ,GAAGR,IAAI,CAACM,OAAO,CAAC,CAAC,IAAI,CAACG,aAAa,CAAC,CAAC;QACjD,IAAIC,QAAQ,GAAGV,IAAI,CAACM,OAAO,CAAC,CAAC,IAAI,CAACK,aAAa,CAAC,CAAC;;QAEjD;QACA,IAAIC,MAAM,GAAGZ,IAAI,CAACY,MAAM,CAAC,CAAC,CAAC,IAAI,CAACC,GAAG,EAAE,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;;QAEjD;QACA,IAAIC,aAAa,GAAGf,IAAI,CAACgB,mBAAmB,CAACJ,MAAM,EAAEP,QAAQ,CAAC;QAC9D,IAAIY,aAAa,GAAGjB,IAAI,CAACgB,mBAAmB,CAACJ,MAAM,EAAEJ,QAAQ,CAAC;QAC9D,IAAIU,aAAa,GAAGlB,IAAI,CAACgB,mBAAmB,CAACJ,MAAM,EAAEF,QAAQ,CAAC;QAE9D,IAAIK,aAAa,CAACI,QAAQ,CAACC,MAAM,GAAG,CAAC,IAAIH,aAAa,CAACE,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;UAC1E,IAAI,CAACC,gBAAgB,GAAG,IAAI;QAC9B,CAAC,MAAM;UACL,IAAI,CAACA,gBAAgB,GAAG,KAAK;QAC/B;QAEA,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAC7B,2FAA0F,IAAI,CAACV,GAAI,IAAG,IAAI,CAACC,IAAK,yBACnH,CAAC;QAED,MAAMU,IAAI,GACRF,IAAI,CAACG,QAAQ,CAACC,mBAAmB,CAACC,aAAa,CAAC,CAAC,CAAC,CAACC,SAAS,CAACC,gBAAgB,CAC1EC,gBAAgB;QACrB,MAAMC,aAAa,GAAGP,IAAI,CAACQ,OAAO,CAACC,UAAU,CAACC,MAAM,CAAEC,IAAI,IACxD,CACE,QAAQ,EACR,OAAO,EACP,UAAU,EACV,MAAM,EACN,UAAU,EACV,iBAAiB,EACjB,SAAS,EACT,YAAY,EACZ,OAAO,EACP,OAAO,CACR,CAACC,QAAQ,CAACD,IAAI,CAACE,IAAI,CACtB,CAAC;QACD,MAAMC,KAAK,GAAGP,aAAa,CAACQ,GAAG,CAAEJ,IAAI,IAAKA,IAAI,CAACK,IAAI,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;QAC/D,IAAI,CAACC,aAAa,GAAGJ,KAAK;MAC5B,CAAC,CAAC,OAAOK,GAAG,EAAE;QACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAClB;IACF;EACF,CAAC;EACDG,UAAU,EAAE;AACd,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}