{"ast":null,"code":"import axios from \"axios\";\nimport * as turf from \"@turf/turf\";\nexport const mapCheckModule = {\n  state: () => ({\n    deliveryPossible: false,\n    polygonCoord1: \"\",\n    polygonCoord2: \"\",\n    polygonCoord3: \"\"\n  }),\n  mutations: {\n    setDeliveryPossible(state, deliveryPossible) {\n      state.deliveryPossible = deliveryPossible;\n    },\n    updatePolygon1(state, polygonCoord1) {\n      state.polygonCoord1 = polygonCoord1;\n    },\n    updatePolygon2(state, polygonCoord2) {\n      state.polygonCoord2 = polygonCoord2;\n    },\n    updatePolygon3(state, polygonCoord3) {\n      state.polygonCoord3 = polygonCoord3;\n    }\n  },\n  actions: {\n    async checkAddress({\n      state,\n      commit\n    }) {\n      // try {\n      //   console.log(polygonCoord1, polygonCoord2, polygonCoord3, lat, long)\n      //   var polygon1 = turf.polygon([polygonCoord1]);\n      //   var polygon2 = turf.polygon([polygonCoord2]);\n      //   var polygon3 = turf.polygon([polygonCoord3]);\n\n      //   // Создаем точки\n      //   var points = turf.points([[lat, long]]);\n\n      //   // Проверяем точки внутри полигона\n      //   var pointsWithin1 = turf.pointsWithinPolygon(points, polygon1);\n      //   var pointsWithin2 = turf.pointsWithinPolygon(points, polygon2);\n      //   var pointsWithin3 = turf.pointsWithinPolygon(points, polygon3);\n\n      //   if (pointsWithin1.features.length > 0 || pointsWithin2.features.length > 0) {\n      //     commit('setDeliveryPossible', true)\n      //   } else {\n      //     commit('setDeliveryPossible', false)   \n      //   }\n\n      //   const { data } = await axios.get(\n      //     `https://geocode-maps.yandex.ru/1.x/?apikey=37720b8b-dc03-4346-b6a4-3ae3458e9af6&geocode=${lat},${long}&format=json&lang=ru_RU`\n      //   );\n\n      //   const path =\n      //     data.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty\n      //       .GeocoderMetaData;\n      //   const filteredArray = path.Address.Components.filter((item) =>\n      //     [\n      //       \"street\",\n      //       \"metro\",\n      //       \"district\",\n      //       \"area\",\n      //       \"province\",\n      //       \"railway_station\",\n      //       \"station\",\n      //       \"vegetation\",\n      //       \"other\",\n      //       \"house\",\n      //     ].includes(item.kind)\n      //   );\n      //   const names = filteredArray.map((item) => item.name).join(\", \");\n      // } catch (err) {\n      //   console.log(err);\n      // }\n    },\n    updatePolygonAction({\n      commit\n    }, polygonCoord1, polygonCoord2, polygonCoord3) {\n      commit;\n    }\n  },\n  namespaced: true\n};","map":{"version":3,"names":["axios","turf","mapCheckModule","state","deliveryPossible","polygonCoord1","polygonCoord2","polygonCoord3","mutations","setDeliveryPossible","updatePolygon1","updatePolygon2","updatePolygon3","actions","checkAddress","commit","updatePolygonAction","namespaced"],"sources":["C:/gitPages/rol-shop/src/store/mapCheckModule.js"],"sourcesContent":["import axios from \"axios\";\r\nimport * as turf from \"@turf/turf\";\r\n\r\nexport const mapCheckModule = {\r\n  state: () => ({\r\n    deliveryPossible: false,\r\n    polygonCoord1: \"\",\r\n    polygonCoord2: \"\",\r\n    polygonCoord3: \"\",\r\n  }),\r\n  mutations: {\r\n    setDeliveryPossible(state, deliveryPossible) {\r\n      state.deliveryPossible = deliveryPossible;\r\n    },\r\n    updatePolygon1(state, polygonCoord1) {\r\n      state.polygonCoord1 = polygonCoord1;\r\n    },\r\n    updatePolygon2(state, polygonCoord2) {\r\n      state.polygonCoord2 = polygonCoord2;\r\n    },\r\n    updatePolygon3(state, polygonCoord3) {\r\n      state.polygonCoord3 = polygonCoord3;\r\n    }\r\n  },\r\n  actions: {\r\n    async checkAddress({ state, commit }) {\r\n      // try {\r\n      //   console.log(polygonCoord1, polygonCoord2, polygonCoord3, lat, long)\r\n      //   var polygon1 = turf.polygon([polygonCoord1]);\r\n      //   var polygon2 = turf.polygon([polygonCoord2]);\r\n      //   var polygon3 = turf.polygon([polygonCoord3]);\r\n\r\n      //   // Создаем точки\r\n      //   var points = turf.points([[lat, long]]);\r\n\r\n      //   // Проверяем точки внутри полигона\r\n      //   var pointsWithin1 = turf.pointsWithinPolygon(points, polygon1);\r\n      //   var pointsWithin2 = turf.pointsWithinPolygon(points, polygon2);\r\n      //   var pointsWithin3 = turf.pointsWithinPolygon(points, polygon3);\r\n\r\n      //   if (pointsWithin1.features.length > 0 || pointsWithin2.features.length > 0) {\r\n      //     commit('setDeliveryPossible', true)\r\n      //   } else {\r\n      //     commit('setDeliveryPossible', false)   \r\n      //   }\r\n\r\n      //   const { data } = await axios.get(\r\n      //     `https://geocode-maps.yandex.ru/1.x/?apikey=37720b8b-dc03-4346-b6a4-3ae3458e9af6&geocode=${lat},${long}&format=json&lang=ru_RU`\r\n      //   );\r\n\r\n      //   const path =\r\n      //     data.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty\r\n      //       .GeocoderMetaData;\r\n      //   const filteredArray = path.Address.Components.filter((item) =>\r\n      //     [\r\n      //       \"street\",\r\n      //       \"metro\",\r\n      //       \"district\",\r\n      //       \"area\",\r\n      //       \"province\",\r\n      //       \"railway_station\",\r\n      //       \"station\",\r\n      //       \"vegetation\",\r\n      //       \"other\",\r\n      //       \"house\",\r\n      //     ].includes(item.kind)\r\n      //   );\r\n      //   const names = filteredArray.map((item) => item.name).join(\", \");\r\n      // } catch (err) {\r\n      //   console.log(err);\r\n      // }\r\n    },\r\n    updatePolygonAction({commit}, polygonCoord1, polygonCoord2, polygonCoord3) {\r\n      commit\r\n    }\r\n  },\r\n  namespaced: true\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,IAAI,MAAM,YAAY;AAElC,OAAO,MAAMC,cAAc,GAAG;EAC5BC,KAAK,EAAEA,CAAA,MAAO;IACZC,gBAAgB,EAAE,KAAK;IACvBC,aAAa,EAAE,EAAE;IACjBC,aAAa,EAAE,EAAE;IACjBC,aAAa,EAAE;EACjB,CAAC,CAAC;EACFC,SAAS,EAAE;IACTC,mBAAmBA,CAACN,KAAK,EAAEC,gBAAgB,EAAE;MAC3CD,KAAK,CAACC,gBAAgB,GAAGA,gBAAgB;IAC3C,CAAC;IACDM,cAAcA,CAACP,KAAK,EAAEE,aAAa,EAAE;MACnCF,KAAK,CAACE,aAAa,GAAGA,aAAa;IACrC,CAAC;IACDM,cAAcA,CAACR,KAAK,EAAEG,aAAa,EAAE;MACnCH,KAAK,CAACG,aAAa,GAAGA,aAAa;IACrC,CAAC;IACDM,cAAcA,CAACT,KAAK,EAAEI,aAAa,EAAE;MACnCJ,KAAK,CAACI,aAAa,GAAGA,aAAa;IACrC;EACF,CAAC;EACDM,OAAO,EAAE;IACP,MAAMC,YAAYA,CAAC;MAAEX,KAAK;MAAEY;IAAO,CAAC,EAAE;MACpC;MACA;MACA;MACA;MACA;;MAEA;MACA;;MAEA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA,CACD;IACDC,mBAAmBA,CAAC;MAACD;IAAM,CAAC,EAAEV,aAAa,EAAEC,aAAa,EAAEC,aAAa,EAAE;MACzEQ,MAAM;IACR;EACF,CAAC;EACDE,UAAU,EAAE;AACd,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}