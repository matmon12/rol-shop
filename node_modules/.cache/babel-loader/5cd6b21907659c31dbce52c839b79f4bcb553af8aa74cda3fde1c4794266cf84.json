{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3074bd5c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"map\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["C:\\gitPages\\rol-shop\\src\\components\\Map.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, inject, computed } from \"vue\";\r\nimport axios from \"axios\";\r\nimport { useStore, mapState } from \"vuex\";\r\nimport { prop } from \"vue-class-component\";\r\nimport * as turf from \"@turf/turf\";\r\n\r\nexport default {\r\n  props: {\r\n    geocoderCoord: Function,\r\n    newMarker: Array,\r\n  },\r\n  mounted() {\r\n\r\n    this.initMap();\r\n  },\r\n  methods: {},\r\n  setup(props) {\r\n    const store = useStore();\r\n    // из store vuex\r\n    const polygonCoord1 = store.state.map.polygonCoord1;\r\n    const polygonCoord2 = store.state.map.polygonCoord2;\r\n    const polygonCoord3 = store.state.map.polygonCoord3;\r\n    var coord = store.state.map.coord;\r\n    var arrayCoord = computed(() => store.state.map.arrayCoord);\r\n    var \r\n\r\n    const zoom = ref(16);\r\n    let map, marker;\r\n\r\n    const initMap = async () => {\r\n      await ymaps3.ready;\r\n      const {\r\n        YMap,\r\n        YMapDefaultSchemeLayer,\r\n        YMapDefaultFeaturesLayer,\r\n        YMapMarker,\r\n        YMapFeature,\r\n        YMapListener,\r\n        YMapControls,\r\n        YMapControlButton,\r\n      } = ymaps3;\r\n      map = new YMap(document.getElementById(\"map\"), {\r\n        location: {\r\n          center: coord,\r\n          zoom: zoom.value,\r\n        },\r\n      });\r\n\r\n      // стили\r\n      const layer = new YMapDefaultSchemeLayer({\r\n        theme: this.themeMap,\r\n        customization: [\r\n          {\r\n            tags: {\r\n              any: [\"traffic_light\"],\r\n            },\r\n            stylers: {\r\n              visibility: \"off\",\r\n            },\r\n          },\r\n          {\r\n            tags: {\r\n              any: [\"entrance\"],\r\n            },\r\n            stylers: {\r\n              visibility: \"off\",\r\n            },\r\n          },\r\n          {\r\n            tags: {\r\n              any: [\"road\"],\r\n              none: [\r\n                \"road_1\",\r\n                \"road_2\",\r\n                \"road_3\",\r\n                \"road_4\",\r\n                \"road_5\",\r\n                \"road_6\",\r\n                \"road_7\",\r\n              ],\r\n            },\r\n            elements: \"label.icon\",\r\n            stylers: {\r\n              visibility: \"off\",\r\n            },\r\n          },\r\n          {\r\n            tags: {\r\n              any: [\"building\", \"address\", \"fence\"],\r\n            },\r\n            stylers: {\r\n              visibility: \"off\",\r\n            },\r\n          },\r\n          {\r\n            tags: {\r\n              any: [\"transit\"],\r\n            },\r\n            stylers: {\r\n              visibility: \"off\",\r\n            },\r\n          },\r\n        ],\r\n      });\r\n      map.addChild(layer);\r\n      map.addChild(new YMapDefaultFeaturesLayer());\r\n\r\n      // маркер\r\n      const markerElement = document.createElement(\"div\");\r\n      markerElement.className = \"icon-marker\";\r\n      marker = new YMapMarker({ coordinates: coord }, markerElement);\r\n      map.addChild(marker);\r\n\r\n      // маркер точки выдачи\r\n      if (props.newMarker && props.newMarker.length > 0) {\r\n        const markerElementDest = document.createElement(\"div\");\r\n        markerElementDest.className = \"icon-marker\";\r\n        let markerDest = new YMapMarker(\r\n          { coordinates: props.newMarker },\r\n          markerElementDest\r\n        );\r\n        map.addChild(markerDest);\r\n\r\n        // центр между точками\r\n        var point1 = turf.point(coord);\r\n        var point2 = turf.point(props.newMarker);\r\n        var midpoint = turf.midpoint(point1, point2);\r\n\r\n        // расстояние между точками\r\n        var distance = turf.distance(point1, point2);\r\n\r\n        // перемещение к центру\r\n        map.update({\r\n          location: {\r\n            ...{\r\n              center: midpoint.geometry.coordinates,\r\n              zoom: calculateZoomLevel(distance),\r\n            },\r\n            duration: 1000,\r\n          },\r\n          tilt: Math.PI / 180,\r\n        });\r\n      }\r\n\r\n      // полигоны\r\n      const polygon1 = new YMapFeature({\r\n        geometry: {\r\n          type: \"Polygon\",\r\n          coordinates: [polygonCoord1],\r\n        },\r\n        style: {\r\n          stroke: [{ color: \"#ffc700\", width: 2 }],\r\n          fill: \"#ffc80059\",\r\n        },\r\n      });\r\n      const polygon2 = new YMapFeature({\r\n        geometry: {\r\n          type: \"Polygon\",\r\n          coordinates: [polygonCoord2],\r\n        },\r\n        style: {\r\n          stroke: [{ color: \"#55b20b\", width: 2 }],\r\n          fill: \"#56b20b50\",\r\n        },\r\n      });\r\n      const polygon3 = new YMapFeature({\r\n        geometry: {\r\n          type: \"Polygon\",\r\n          coordinates: [polygonCoord3],\r\n        },\r\n        style: {\r\n          stroke: [{ color: \"#f44837\", width: 2 }],\r\n          fill: \"#f4473752\",\r\n        },\r\n      });\r\n      map.addChild(polygon1);\r\n      map.addChild(polygon2);\r\n      map.addChild(polygon3);\r\n\r\n      // обработка клика / перемещение по карте по клику\r\n      function changeMapPosition(location, camera) {\r\n        map.update({ location: { ...location, duration: 1000 }, camera });\r\n      }\r\n      const click = (object, event) => {\r\n        changeMapPosition(\r\n          {\r\n            center: [event.coordinates[0], event.coordinates[1]],\r\n            zoom: zoom.value,\r\n          },\r\n          { tilt: Math.PI / 180 }\r\n        );\r\n        coord = [event.coordinates[0], event.coordinates[1]];\r\n        marker.update({ coordinates: coord });\r\n        // геокодер\r\n        props.geocoderCoord(event.coordinates[0], event.coordinates[1]);\r\n      };\r\n      const mapListener = new YMapListener({\r\n        onClick: click,\r\n      });\r\n      map.addChild(mapListener);\r\n    };\r\n\r\n    const moveMap = (item) => {\r\n      // преобразование адреса в координаты\r\n      store.dispatch(\"map/geocoderAddress\", item).then(() => {\r\n        // перемещение по карте\r\n        map.update({\r\n          location: {\r\n            ...{\r\n              center: [arrayCoord.value[0], arrayCoord.value[1]],\r\n              zoom: zoom.value,\r\n            },\r\n            duration: 1000,\r\n          },\r\n          tilt: Math.PI / 180,\r\n        });\r\n        coord = [arrayCoord.value[0], arrayCoord.value[1]];\r\n        marker.update({ coordinates: coord });\r\n      });\r\n    };\r\n\r\n    const calculateZoomLevel = (distance) => {\r\n      const earthRadius = 6371; // Радиус Земли\r\n      const pixelWidth = 1.1; // Ширина тайла карты в пикселях\r\n      const zoom = Math.round(\r\n        Math.log2((earthRadius * 2 * Math.PI) / (distance * pixelWidth))\r\n      );\r\n\r\n      return zoom;\r\n    };\r\n\r\n    return {\r\n      initMap,\r\n      map,\r\n      marker,\r\n      coord,\r\n      zoom,\r\n      moveMap,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#map {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,EAAE,EAAC;AAAK;;uBAAbC,mBAAA,CAAoB,OAApBC,UAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}