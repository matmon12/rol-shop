/// <reference types="@yandex/ymaps3-types" />
import type { Ref } from 'vue';
import type { OverloadParameters } from './types/overload-extract.ts';
export declare namespace VueYandexMaps {
    const settings: Ref<VueYandexMaps.PluginSettings>;
    const ymaps: () => typeof import("@yandex/ymaps3-types");
    class YandexMapException extends Error {
        constructor(message: string);
    }
    type LoadStatus = 'pending' | 'loading' | 'loaded' | 'error';
    const loadStatus: Ref<LoadStatus>;
    const isLoaded: import("vue").ComputedRef<boolean>;
    const loadError: Ref<string | {
        name: string;
        message: string;
        stack?: string | undefined;
    } | {
        readonly bubbles: boolean;
        cancelBubble: boolean;
        readonly cancelable: boolean;
        readonly composed: boolean;
        readonly currentTarget: {
            addEventListener: (type: string, callback: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions | undefined) => void;
            dispatchEvent: (event: Event) => boolean;
            removeEventListener: (type: string, callback: EventListenerOrEventListenerObject | null, options?: boolean | EventListenerOptions | undefined) => void;
        } | null;
        readonly defaultPrevented: boolean;
        readonly eventPhase: number;
        readonly isTrusted: boolean;
        returnValue: boolean;
        readonly srcElement: {
            addEventListener: (type: string, callback: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions | undefined) => void;
            dispatchEvent: (event: Event) => boolean;
            removeEventListener: (type: string, callback: EventListenerOrEventListenerObject | null, options?: boolean | EventListenerOptions | undefined) => void;
        } | null;
        readonly target: {
            addEventListener: (type: string, callback: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions | undefined) => void;
            dispatchEvent: (event: Event) => boolean;
            removeEventListener: (type: string, callback: EventListenerOrEventListenerObject | null, options?: boolean | EventListenerOptions | undefined) => void;
        } | null;
        readonly timeStamp: number;
        readonly type: string;
        composedPath: () => EventTarget[];
        initEvent: (type: string, bubbles?: boolean | undefined, cancelable?: boolean | undefined) => void;
        preventDefault: () => void;
        stopImmediatePropagation: () => void;
        stopPropagation: () => void;
        readonly NONE: 0;
        readonly CAPTURING_PHASE: 1;
        readonly AT_TARGET: 2;
        readonly BUBBLING_PHASE: 3;
    } | null>;
    interface PluginSettings {
        /**
         * @see https://yandex.ru/dev/maps/jsapi/doc/3.0/dg/concepts/load.html#parms
         * @see https://yandex.com/dev/maps/jsapi/doc/3.0/dg/concepts/load.html#parms
         */
        apikey: string;
        /**
         * @see https://yandex.ru/dev/maps/jsapi/doc/3.0/dg/concepts/load.html#parms
         * @see https://yandex.com/dev/maps/jsapi/doc/3.0/dg/concepts/load.html#parms
         * @default ru_RU
         */
        lang?: string;
        /**
         * @default v3
         */
        version?: string;
        /**
         * @see https://yandex.ru/dev/maps/jsapi/doc/3.0/dg/concepts/general.html#strict-mode
         * @see https://yandex.com/dev/maps/jsapi/doc/3.0/dg/concepts/general.html#strict-mode
         * @default false
         */
        strictMode?: boolean;
        /**
         * @default https://api-maps.yandex.ru
         */
        domain?: string;
        /**
         * @description You can choose where to initialize Yandex Maps library
         *
         * - onPluginInit will load maps as soon as you call createYmapsOptions (on Client Side only)
         * - onComponentMount will load maps as soon as you load component (lazy option, default)
         * - never will require you to call initYmaps by yourself
         *
         * @default onComponentMount
         */
        initializeOn?: 'onPluginInit' | 'onComponentMount' | 'never';
        /**
         * @description You can preload modules in initYmaps, note you will still have to import them later to use
         * @see https://yandex.ru/dev/maps/jsapi/doc/3.0/ref/modules/index.html
         * @see https://yandex.com/dev/maps/jsapi/doc/3.0/ref/modules/index.html
         */
        importModules?: OverloadParameters<typeof ymaps3['import']>[0][];
        /**
         * @description Amount of time in milliseconds library will wait for Yandex script full load.
         *
         * Set this to false, to disable this behaviour and make library wait forever.
         * @default true (5000)
         */
        mapsScriptWaitDuration?: number | boolean;
        /**
         * @description Amount of time in milliseconds library will wait for all components render after Yandex script was loaded.
         *
         * Set this to false, to disable this behaviour and make library wait forever.
         * @note If you disable this behaviour completely, any fatal error inside components will not lead to exception and library will never load.
         * @default true (5000)
         */
        mapsRenderWaitDuration?: number | boolean;
    }
    /**
     * @description Strict-typed version of PluginSettings with all keys required
     */
    type DefProductSettings = {
        [T in keyof PluginSettings]-?: PluginSettings[T];
    };
}
