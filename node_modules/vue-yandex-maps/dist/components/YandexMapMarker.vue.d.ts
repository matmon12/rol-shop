import type { YMapMarker } from '@yandex/ymaps3-types';
import type { PropType, SlotsType } from 'vue';
import type { YandexMapMarkerPosition } from '../types/marker.ts';
declare const _default: import("vue").DefineComponent<{
    value: {
        type: PropType<YMapMarker>;
        default: null;
    };
    modelValue: {
        type: PropType<YMapMarker>;
        default: null;
    };
    settings: {
        type: PropType<import("@yandex/ymaps3-types/imperative/YMapMarker/index").YMapMarkerProps>;
        required: true;
    };
    /**
     * @description Sets translate(%, %) to marker to align it properly.
     *
     * If you want to make aligment to be like Yandex Maps 2.0, set this property to "top left-center".
     * @default default (as goes in Yandex by default)
     */
    position: {
        type: PropType<YandexMapMarkerPosition>;
    };
    /**
     * @description Allows you to add any attributes to <div class="__ymap-marker"> container.
     *
     * Important: to pass styles, you must use object-style prop instead of string.
     */
    containerAttrs: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * @description Allows you to add any attributes to <div class="__ymap-marker_wrapper"> container.
     *
     * Important: to pass styles, you must use object-style prop instead of string.
     */
    wrapperAttrs: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * @description Will add width and height: 0 to container.
     *
     * Null enables default behaviour, false disables it completely (even if position is specified).
     *
     * @default true if position is specified, false otherwise
     */
    zeroSizes: {
        type: PropType<boolean | null>;
        default: null;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    input(item: YMapMarker): boolean;
    'update:modelValue'(item: YMapMarker): boolean;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: PropType<YMapMarker>;
        default: null;
    };
    modelValue: {
        type: PropType<YMapMarker>;
        default: null;
    };
    settings: {
        type: PropType<import("@yandex/ymaps3-types/imperative/YMapMarker/index").YMapMarkerProps>;
        required: true;
    };
    /**
     * @description Sets translate(%, %) to marker to align it properly.
     *
     * If you want to make aligment to be like Yandex Maps 2.0, set this property to "top left-center".
     * @default default (as goes in Yandex by default)
     */
    position: {
        type: PropType<YandexMapMarkerPosition>;
    };
    /**
     * @description Allows you to add any attributes to <div class="__ymap-marker"> container.
     *
     * Important: to pass styles, you must use object-style prop instead of string.
     */
    containerAttrs: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * @description Allows you to add any attributes to <div class="__ymap-marker_wrapper"> container.
     *
     * Important: to pass styles, you must use object-style prop instead of string.
     */
    wrapperAttrs: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * @description Will add width and height: 0 to container.
     *
     * Null enables default behaviour, false disables it completely (even if position is specified).
     *
     * @default true if position is specified, false otherwise
     */
    zeroSizes: {
        type: PropType<boolean | null>;
        default: null;
    };
}>> & {
    onInput?: ((item: YMapMarker) => any) | undefined;
    "onUpdate:modelValue"?: ((item: YMapMarker) => any) | undefined;
}, {
    value: YMapMarker;
    modelValue: YMapMarker;
    containerAttrs: Record<string, any>;
    wrapperAttrs: Record<string, any>;
    zeroSizes: boolean | null;
}, SlotsType<{
    default: {};
}>>;
export default _default;
